<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Common</name>
    </assembly>
    <members>
        <member name="T:OilDigital.Common.CODE128">
            <summary>
            Summary description for Code128Rendering.
            </summary>
        </member>
        <member name="M:OilDigital.Common.CODE128.OutPutImage(System.String,System.Int32)">
            <summary>
            输出自适应大小的一维条码图片
            </summary>
            <param name="InputData">待编码的信息</param>
            <param name="BarWeight">条码宽的基准厚度 (1或2 最佳)</param>        
            <returns>一维条码图片</returns>       
        </member>
        <member name="M:OilDigital.Common.CODE128.OutPutImage(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            输出指定大小的一维条码图片
            </summary>
            <param name="InputData">待编码的信息</param>
            <param name="BarWeight">条码宽的基准厚度 (1或2 最佳)</param>
            <param name="Width">条码宽度（以像素为单位）</param>
            <param name="Height">条码高度（以像素为单位）</param>
            <returns>一维条码图片</returns>
        </member>
        <member name="M:OilDigital.Common.CODE128.OutputImageForPrint(System.String,System.Int32,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            输出自适应大小的一维条码到打印机
            </summary>
            <param name="InputData">待编码的信息</param>
            <param name="BarWeight">条码宽的基准厚度 (1或2 最佳)</param>
            <param name="e">封装了打印的相关信息</param>
        </member>
        <member name="M:OilDigital.Common.CODE128.OutputImageForPrint(System.String,System.Int32,System.Int32,System.Int32,System.Drawing.Printing.PrintPageEventArgs)">
            <summary>
            输出指定大小的一维条码到打印机
            </summary>
            <param name="InputData">待编码的信息</param>
            <param name="BarWeight">条码宽的基准厚度 (1或2 最佳)</param>
            <param name="Width">条码宽度（以像素为单位）</param>
            <param name="Height">条码高度（以像素为单位）</param>
            <param name="e">封装了打印的相关信息</param>
        </member>
        <member name="M:OilDigital.Common.CODE128.Code128Content(System.String)">
            <summary>
            Create content based on a string of ASCII data
            </summary>
            <param name="AsciiData">the string that should be represented</param>
        </member>
        <member name="M:OilDigital.Common.CODE128.StringToCode128(System.String)">
            <summary>
            Transform the string into integers representing the Code128 codes necessary to represent it  
            </summary>
            <param name="AsciiData">String to be encoded</param>
            <returns>Code128 representation</returns>
        </member>
        <member name="M:OilDigital.Common.CODE128.GetBestStartSet(OilDigital.Common.CODE128.CodeSetAllowed,OilDigital.Common.CODE128.CodeSetAllowed)">
            <summary>
            Determines the best starting code set based on the the first two characters of the string to be encoded
            </summary>
            <param name="csa1">First character of input string</param>
            <param name="csa2">Second character of input string</param>
            <returns>The codeset determined to be best to start with</returns>
        </member>
        <member name="M:OilDigital.Common.CODE128.CodesForChar(System.Int32,System.Int32,OilDigital.Common.CODE128.CodeSet@)">
            <summary>
            Get the Code128 code value(s) to represent an ASCII character, with optional look-ahead for length optimization           
            </summary>
            <param name="CharAscii">The ASCII value of the character to translate</param>
            <param name="LookAheadAscii">The next character in sequence (or -1 if none)</param>
            <param name="CurrCodeSet">The current codeset, that the returned codes need to follow;
            if the returned codes change that, then this value will be changed to reflect it</param>
            <returns>An array of integers representing the codes that need to be output to produce the given character </returns>
        </member>
        <member name="M:OilDigital.Common.CODE128.CodesetAllowedForChar(System.Int32)">
            <summary>
            Tells us which codesets a given character value is allowed in
            </summary>
            <param name="CharAscii">ASCII value of character to look at</param>
            <returns>Which codeset(s) can be used to represent this character</returns>
        </member>
        <member name="M:OilDigital.Common.CODE128.CharCompatibleWithCodeset(System.Int32,OilDigital.Common.CODE128.CodeSet)">
            <summary>
            Determine if a character can be represented in a given codeset
            </summary>
            <param name="CharAscii">character to check for</param>
            <param name="currcs">codeset context to test</param>
            <returns>true if the codeset contains a representation for the ASCII character</returns>
        </member>
        <member name="M:OilDigital.Common.CODE128.CodeValueForChar(System.Int32)">
            <summary>
            Gets the integer code128 code value for a character (assuming the appropriate code set)
            </summary>
            <param name="CharAscii">character to convert</param>
            <returns>code128 symbol value for the character</returns>
        </member>
        <member name="M:OilDigital.Common.CODE128.StartCodeForCodeSet(OilDigital.Common.CODE128.CodeSet)">
            <summary>
            Return the appropriate START code depending on the codeset we want to be in
            </summary>
            <param name="cs">The codeset you want to start in</param>
            <returns>The code128 code to start a barcode in that codeset</returns>
        </member>
        <member name="M:OilDigital.Common.CODE128.StopCode">
            <summary>
            Return the Code128 stop code
            </summary>
            <returns>the stop code</returns>
        </member>
        <member name="T:OilDigital.Common.CODE128.CodeSetAllowed">
            <summary>
            Indicates which code sets can represent a character -- CodeA, CodeB, or either
            </summary>
        </member>
        <member name="T:OilDigital.Common.CrossType">
            <summary>
            计算交叉值的类型
            </summary>
        </member>
        <member name="F:OilDigital.Common.CrossType.Count">
            <summary>
            计数
            </summary>
        </member>
        <member name="F:OilDigital.Common.CrossType.Sum">
            <summary>
            求和
            </summary>
        </member>
        <member name="T:OilDigital.Common.CrossReportService">
            <summary>
            根据已知的一个二维表按照一定的数值计算交叉报表
            </summary>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.#ctor(System.Data.DataTable,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.CrossReportService"/> 垂直方向数据所在列为0,水平轴所在列为预定义数组,值列所在列为2,并计数小计和合计
            </summary>
            <param name="dt">The data source dataTable</param>
            <param name="horizonValues">The string array that contains all horizontal values.</param>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.#ctor(System.Data.DataTable,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.CrossReportService"/> 垂直方向数据所在列为0,水平轴所在列为预定义索引整型参数,值列所在列为2,并计数小计,合计
            </summary>
            <param name="dt">The data source dataTable</param>
            <param name="horizonIndex">The column index of the horizon in the data source's table .</param>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.#ctor(System.Data.DataTable,System.String[],System.Int32,System.Int32,System.String,System.Int32,OilDigital.Common.CrossType)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.CrossReportService"/> class.
            </summary>
            <param name="dt">用于交叉计算的数据源</param>
            <param name="horizonValues">指定的水平方向的值的数组</param>
            <param name="horizonIndex">水平方向值所在的dt中的索引</param>
            <param name="verticalIndex">垂直方向值在dt中的索引</param>
            <param name="verticalName">垂直方向值的名称(表头)</param>
            <param name="valueIndex">单值交叉是,用于交叉的值在dt中所在的索引</param>
            <param name="calculateType">交叉技术的类型</param>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.#ctor(System.Data.DataTable,System.Int32,System.Int32,System.String,System.Int32,OilDigital.Common.CrossType)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.CrossReportService"/> class.
            </summary>
            <param name="dt">用于交叉计算的数据源</param>
            <param name="horizonIndex">水平方向值所在的dt中的索引</param>
            <param name="verticalIndex">垂直方向值在dt中的索引</param>
            <param name="verticalName">垂直方向值的名称(表头)</param>
            <param name="valueIndex">单值交叉是,用于交叉的值在dt中所在的索引</param>
            <param name="calculateType">交叉技术的类型</param>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.#ctor(System.Data.DataTable,System.String[],System.Int32,System.Int32,System.String,System.Int32[],OilDigital.Common.CrossType[])">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.CrossReportService"/> class.
            </summary>
            <param name="dt">用于交叉计算的数据源</param>
            <param name="horizonValues">指定的水平方向的值的数组</param>
            <param name="horizonIndex">水平方向值所在的dt中的索引</param>
            <param name="verticalIndex">垂直方向值在dt中的索引</param>
            <param name="verticalName">垂直方向值的名称(表头)</param>
            <param name="valueIndexs">勇于交叉计算的值列在dt中的索引数组</param>
            <param name="calculateTypes">交叉技术的类型</param>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.#ctor(System.Data.DataTable,System.Int32,System.Int32,System.String,System.Int32[],OilDigital.Common.CrossType[])">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.CrossReportService"/> class.
            </summary>
            <param name="dt">用于交叉计算的数据源</param>
            <param name="horizonIndex">水平方向值所在的dt中的索引</param>
            <param name="verticalIndex">垂直方向值在dt中的索引</param>
            <param name="verticalName">垂直方向值的名称(表头)</param>
            <param name="valueIndexs">勇于交叉计算的值列在dt中的索引数组</param>
            <param name="calculateTypes">交叉技术的类型</param>
        </member>
        <member name="F:OilDigital.Common.CrossReportService.hasHorizonValueAssigned">
            <summary>
            是否是直接指定水平方向值
            </summary>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.GetColumnNames">
            <summary>
            自动获取 the column names.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.Pivot(System.String@)">
            <summary>
            交叉表统计中间结果处理
            将行数据转为列数据
            </summary>
            <param name="errorMsg">错误信息</param>
            <returns>null:如果技术时出现异常,否则返回计算的结果</returns>
        </member>
        <member name="M:OilDigital.Common.CrossReportService.RenderToTable(System.Data.DataTable,System.String,System.String[],System.Web.UI.WebControls.Table)">
            <summary>
            为已经交叉好的datatable生成表头
            </summary>
            <param name="pivotedDT">已经完成交叉的数据结果</param>
            <param name="seqColumnName">序号列的名称,如果为null或empty,那么表示不生成序号列.</param>
            <param name="valueColumnNames">单进行多值交叉的时候,需要为第二行的列指定名称.起数组长度必须和值列的长度一致</param>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.SourceTable">
            <summary>
            Gets the source Datatable.
            </summary>
            <value>The source table.</value>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.HorizonValues">
            <summary>
            需要统计的值
            </summary>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.VerticalIndex">
            <summary>
            X轴方向的字段在DataTable的字段中所在的索引
            </summary>
            <value>The index of the vertical.</value>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.VerticalName">
            <summary>
            垂直方向轴的表头名称
            </summary>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.HorizonIndex">
            <summary>
            水平方向交叉字段所在的索引
            </summary>
            <value>The index of the horizon.</value>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.ValueIndexs">
            <summary>
            值字段所在的索引
            </summary>
            <value>The index of the value.</value>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.CalculateTypes">
            <summary>
            Gets or sets the type of the calculate.
            </summary>
            <value>The type of the calculate.</value>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.AddOtherColumn">
            <summary>
            在交叉时,如果数据的范围不在预定义的范围之中,是否统计这些数据到其他字段中,缺省为false
            而且只有在指定水平方向值的时候才起作用,如果水平方向为自动生成,那么它的值永远为false
            </summary>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.OtherColumnName">
            <summary>
            在交叉时,如果数据的范围不在预定义的范围之中,如果显示这些值,那么其字段的显示名称
            缺省为"小计"
            </summary>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.SumEveryRow">
            <summary>
            Gets or sets a value indicating whether sum every row.
            </summary>
            <value><c>true</c> if [sum every row]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.EveryRowSumColumnName">
            <summary>
            每行小计的字段的显示名称
            </summary>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.CreateSummaryRow">
            <summary>
            Gets or sets a value indicating whether create summary row.
            </summary>
            <value><c>true</c> if [create summary row]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.SummaryRowName">
            <summary>
            显示合计行的名称
            </summary>
        </member>
        <member name="P:OilDigital.Common.CrossReportService.ResultColumnCount">
            <summary>
            结果集的总列数
            </summary>
        </member>
        <member name="T:OilDigital.Common.Check">
             <summary>
             按契约编程(Design By Contract Checks).
             
             Each method generates an exception or
             a trace assertion statement if the contract is broken.
             </summary>
             <remarks>
             This example shows how to call the Require method.
             <code>
             public void Test(int x)
             {
             	try
             	{
            			Check.Require(x > 1, "x must be > 1");
            		}
            		catch (System.Exception ex)
            		{
            			Console.WriteLine(ex.ToString());
            		}
            	}
             </code>
            
             You can direct output to a Trace listener. For example, you could insert
             <code>
             Trace.Listeners.Clear();
             Trace.Listeners.Add(new TextWriterTraceListener(Console.Out));
             </code>
             
             or direct output to a file or the Event Log.
             
             (Note: For ASP.NET clients use the Listeners collection
             of the Debug, not the Trace, object and, for a Release build, only exception-handling
             is possible.)
             </remarks>
        </member>
        <member name="M:OilDigital.Common.Check.Require(System.Boolean,System.String)">
            <summary>
            Precondition check - should run regardless of preprocessor directives.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Require(System.Boolean,System.String,System.Exception)">
            <summary>
            Precondition check - should run regardless of preprocessor directives.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Require(System.Boolean)">
            <summary>
            Precondition check - should run regardless of preprocessor directives.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Ensure(System.Boolean,System.String)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Ensure(System.Boolean,System.String,System.Exception)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Ensure(System.Boolean)">
            <summary>
            Postcondition check.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Invariant(System.Boolean,System.String)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Invariant(System.Boolean,System.String,System.Exception)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Invariant(System.Boolean)">
            <summary>
            Invariant check.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Assert(System.Boolean,System.String)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Assert(System.Boolean,System.String,System.Exception)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Check.Assert(System.Boolean)">
            <summary>
            Assertion check.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Check.UseAssertions">
            <summary>
            Set this if you wish to use Trace Assert statements 
            instead of exception handling. 
            (The Check class uses exception handling by default.)
            </summary>
        </member>
        <member name="P:OilDigital.Common.Check.UseExceptions">
            <summary>
            Is exception handling being used?
            </summary>
        </member>
        <member name="T:OilDigital.Common.DesignByContractException">
            <summary>
            Exception raised when a contract is broken.
            Catch this exception type if you wish to differentiate between 
            any DesignByContract exception and other runtime exceptions.
             
            </summary>
        </member>
        <member name="T:OilDigital.Common.PreconditionException">
            <summary>
            前置条件异常
            </summary>
        </member>
        <member name="M:OilDigital.Common.PreconditionException.#ctor">
            <summary>
            前置条件异常
            </summary>
        </member>
        <member name="M:OilDigital.Common.PreconditionException.#ctor(System.String)">
             <summary>
            前置条件异常
             </summary>
        </member>
        <member name="M:OilDigital.Common.PreconditionException.#ctor(System.String,System.Exception)">
            <summary>
            前置条件异常
            </summary>
        </member>
        <member name="T:OilDigital.Common.PostconditionException">
             <summary>
            后置条件异常
             </summary>
        </member>
        <member name="M:OilDigital.Common.PostconditionException.#ctor">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="M:OilDigital.Common.PostconditionException.#ctor(System.String)">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="M:OilDigital.Common.PostconditionException.#ctor(System.String,System.Exception)">
            <summary>
            Postcondition Exception.
            </summary>
        </member>
        <member name="T:OilDigital.Common.InvariantException">
            <summary>
            违反不可变规则时抛出的异常
            </summary>
        </member>
        <member name="M:OilDigital.Common.InvariantException.#ctor">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="M:OilDigital.Common.InvariantException.#ctor(System.String)">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="M:OilDigital.Common.InvariantException.#ctor(System.String,System.Exception)">
            <summary>
            Invariant Exception.
            </summary>
        </member>
        <member name="T:OilDigital.Common.AssertionException">
            <summary>
            assertion 失败异常
            </summary>
        </member>
        <member name="M:OilDigital.Common.AssertionException.#ctor">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:OilDigital.Common.AssertionException.#ctor(System.String)">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="M:OilDigital.Common.AssertionException.#ctor(System.String,System.Exception)">
            <summary>
            Assertion Exception.
            </summary>
        </member>
        <member name="T:OilDigital.Common.Csv.CachedCsvReader">
            <summary>
            Represents a reader that provides fast, cached, dynamic access to CSV data.
            </summary>
            <remarks>The number of records is limited to <see cref="F:System.Int32.MaxValue"/> - 1.</remarks>
        </member>
        <member name="T:OilDigital.Common.Csv.CsvReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to CSV data.  
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.DefaultBufferSize">
            <summary>
            Defines the default buffer size.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.DefaultDelimiter">
            <summary>
            Defines the default delimiter character separating each field.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.DefaultQuote">
            <summary>
            Defines the default quote character wrapping every field.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.DefaultEscape">
            <summary>
            Defines the default escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.DefaultComment">
            <summary>
            Defines the default comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._fieldHeaderComparer">
            <summary>
            Contains the field header comparer.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._reader">
            <summary>
            Contains the <see cref="T:TextReader"/> pointing to the CSV file.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._bufferSize">
            <summary>
            Contains the buffer size.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._comment">
            <summary>
            Contains the comment character indicating that a line is commented out.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._escape">
            <summary>
            Contains the escape character letting insert quotation characters inside a quoted field.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._delimiter">
            <summary>
            Contains the delimiter character separating each field.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._quote">
            <summary>
            Contains the quotation character wrapping every field.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._trimSpaces">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._hasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._defaultParseErrorAction">
            <summary>
            Contains the default action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._missingFieldAction">
            <summary>
            Contains the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._supportsMultiline">
            <summary>
            Indicates if the reader supports multiline.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._skipEmptyLines">
            <summary>
            Indicates if the reader will skip empty lines.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._initialized">
            <summary>
            Indicates if the class is initialized.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._fieldHeaders">
            <summary>
            Contains the field headers.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._fieldHeaderIndexes">
            <summary>
            Contains the dictionary of field indexes by header. The key is the field name and the value is its index.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._currentRecordIndex">
            <summary>
            Contains the current record index in the CSV file.
            A value of <see cref="M:Int32.MinValue"/> means that the reader has not been initialized yet.
            Otherwise, a negative value means that no record has been read yet.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._nextFieldStart">
            <summary>
            Contains the starting position of the next unread field.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._nextFieldIndex">
            <summary>
            Contains the index of the next unread field.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._fields">
            <summary>
            Contains the array of the field values for the current record.
            A null value indicates that the field have not been parsed.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._fieldCount">
            <summary>
            Contains the maximum number of fields to retrieve for each record.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._buffer">
            <summary>
            Contains the read buffer.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._bufferLength">
            <summary>
            Contains the current read buffer length.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._eof">
            <summary>
            Indicates if the end of the reader has been reached.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._firstRecordInCache">
            <summary>
            Indicates if the first record is in cache.
            This can happen when initializing a reader with no headers
            because one record must be read to get the field count automatically
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._missingFieldsFlag">
            <summary>
            Indicates if fields are missing for the current record.
            Resets after each successful record read.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.OnParseError(OilDigital.Common.Csv.ParseErrorEventArgs)">
            <summary>
            Raises the <see cref="M:ParseError"/> event.
            </summary>
            <param name="e">The <see cref="T:OilDigital.Common.Csv.ParseErrorEventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.GetFieldHeaders">
            <summary>
            Gets the field headers.
            </summary>
            <returns>The field headers or an empty array if headers are not supported.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.EnsureInitialize">
            <summary>
            Ensures that the reader is initialized.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.GetFieldIndex(System.String)">
            <summary>
            Gets the field index for the provided header.
            </summary>
            <param name="header">The header to look for.</param>
            <returns>The field index for the provided header. -1 if not found.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.CopyCurrentRecordTo(System.String[])">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.CopyCurrentRecordTo(System.String[],System.Int32)">
            <summary>
            Copies the field array of the current record to a one-dimensional array, starting at the beginning of the target array.
            </summary>
            <param name="array"> The one-dimensional <see cref="T:Array"/> that is the destination of the fields of the current record.</param>
            <param name="index">The zero-based index in <paramref name="array"/> at which copying begins.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="index"/> is les than zero or is equal to or greater than the length <paramref name="array"/>. 
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.ArgumentException">
            	The number of fields in the record is greater than the available space from <paramref name="index"/> to the end of <paramref name="array"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.GetCurrentRawData">
            <summary>
            Gets the current raw CSV data.
            </summary>
            <remarks>Used for exception handling purpose.</remarks>
            <returns>The current raw CSV data.</returns>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.IsWhiteSpace(System.Char)">
            <summary>
            Indicates whether the specified Unicode character is categorized as white space.
            </summary>
            <param name="c">A Unicode character.</param>
            <returns><see langword="true"/> if <paramref name="c"/> is white space; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.ParseNewLine(System.Int32@)">
            <summary>
            Parses a new line delimiter.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if a new line delimiter was found; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.ReadBuffer">
            <summary>
            Fills the buffer with data from the reader.
            </summary>
            <returns><see langword="true"/> if data was successfully read; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.ReadField(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Reads the field at the specified index.
            Any unread fields with an inferior index will also be read as part of the required parsing.
            </summary>
            <param name="field">The field index.</param>
            <param name="initializing">Indicates if the reader is currently initializing.</param>
            <param name="discardValue">Indicates if the value(s) are discarded.</param>
            <returns>
            The field at the specified index. 
            A <see langword="null"/> indicates that an error occured or that the last field has been reached during initialization.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="field"/> is out of range.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            	There is no current record.
            </exception>
            <exception cref="T:OilDigital.Common.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:OilDigital.Common.Csv.MalformedCsvException">
            	The CSV data appears to be malformed.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.ReadNextRecord">
            <summary>
            Reads the next record.
            </summary>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.SkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            Skips empty and commented lines.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.DoSkipEmptyAndCommentedLines(System.Int32@)">
            <summary>
            <para>Worker method.</para>
            <para>Skips empty and commented lines.</para>
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.SkipWhiteSpaces(System.Int32@)">
            <summary>
            Skips whitespace characters.
            </summary>
            <param name="pos">The starting position of the parsing. Will contain the resulting end position.</param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.SkipToNextLine(System.Int32@)">
            <summary>
            Skips ahead to the next NewLine character.
            If the end of the buffer is reached, its content be discarded and filled again from the reader.
            </summary>
            <param name="pos">
            The position in the buffer where to start parsing. 
            Will contains the resulting position after the operation.
            </param>
            <returns><see langword="true"/> if the end of the reader has not been reached; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.HandleParseError(OilDigital.Common.Csv.MalformedCsvException,System.Int32@)">
            <summary>
            Handles a parsing error.
            </summary>
            <param name="error">The parsing error that occured.</param>
            <param name="pos">The current position in the buffer.</param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="error"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.HandleMissingField(System.String,System.Int32,System.Int32@)">
            <summary>
            Handles a missing field error.
            </summary>
            <param name="value">The partially parsed value, if available.</param>
            <param name="fieldIndex">The missing field index.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <returns>
            The resulting value according to <see cref="M:MissingFieldAction"/>.
            If the action is set to <see cref="T:MissingFieldAction.TreatAsParseError"/>,
            then the parse error will be handled according to <see cref="P:OilDigital.Common.Csv.CsvReader.DefaultParseErrorAction"/>.
            </returns>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.ValidateDataReader(OilDigital.Common.Csv.CsvReader.DataReaderValidations)">
            <summary>
            Validates the state of the data reader.
            </summary>
            <param name="validations">The validations to accomplish.</param>
            <exception cref="T:System.InvalidOperationException">
            No current record.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This operation is invalid when the reader is closed.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.CopyFieldToArray(System.Int32,System.Int64,System.Array,System.Int32,System.Int32)">
            <summary>
            Copy the value of the specified field to an array.
            </summary>
            <param name="field">The index of the field.</param>
            <param name="fieldOffset">The offset in the field value.</param>
            <param name="destinationArray">The destination array where the field value will be copied.</param>
            <param name="destinationOffset">The destination array offset.</param>
            <param name="length">The number of characters to copy from the field value.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.GetEnumerator">
            <summary>
            Returns an <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:RecordEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.System#Collections#Generic#IEnumerable{System#String[]}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.Generics.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.
            </summary>
            <returns>An <see cref="T:System.Collections.IEnumerator"/>  that can iterate through CSV records.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._isDisposed">
            <summary>
            Contains the disposed status flag.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader._lock">
            <summary>
            Contains the locking object for multi-threading purpose.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.OnDisposed(System.EventArgs)">
            <summary>
            Raises the <see cref="M:Disposed"/> event.
            </summary>
            <param name="e">A <see cref="T:System.EventArgs"/> that contains the event data.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.CheckDisposed">
            <summary>
            Checks if the instance has been disposed of, and if it has, throws an <see cref="T:System.ComponentModel.ObjectDisposedException"/>; otherwise, does nothing.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
            <remarks>
            	Derived classes should call this method at the start of all methods and properties that should not be accessed after a call to <see cref="M:Dispose()"/>.
            </remarks>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.Dispose">
            <summary>
            Releases all resources used by the instance.
            </summary>
            <remarks>
            	Calls <see cref="M:Dispose(Boolean)"/> with the disposing parameter set to <see langword="true"/> to free unmanaged and managed resources.
            </remarks>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged resources used by this instance and optionally releases the managed resources.
            </summary>
            <param name="disposing">
            	<see langword="true"/> to release both managed and unmanaged resources; <see langword="false"/> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations before the instance is reclaimed by garbage collection.
            </summary>
        </member>
        <member name="E:OilDigital.Common.Csv.CsvReader.ParseError">
            <summary>
            Occurs when there is an error while parsing the CSV stream.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.Comment">
            <summary>
            Gets the comment character indicating that a line is commented out.
            </summary>
            <value>The comment character indicating that a line is commented out.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.Escape">
            <summary>
            Gets the escape character letting insert quotation characters inside a quoted field.
            </summary>
            <value>The escape character letting insert quotation characters inside a quoted field.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.Delimiter">
            <summary>
            Gets the delimiter character separating each field.
            </summary>
            <value>The delimiter character separating each field.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.Quote">
            <summary>
            Gets the quotation character wrapping every field.
            </summary>
            <value>The quotation character wrapping every field.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.HasHeaders">
            <summary>
            Indicates if field names are located on the first non commented line.
            </summary>
            <value><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.TrimSpaces">
            <summary>
            Indicates if spaces at the start and end of a field are trimmed.
            </summary>
            <value><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.BufferSize">
            <summary>
            Gets the buffer size.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.DefaultParseErrorAction">
            <summary>
            Gets or sets the default action to take when a parsing error has occured.
            </summary>
            <value>The default action to take when a parsing error has occured.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.MissingFieldAction">
            <summary>
            Gets or sets the action to take when a field is missing.
            </summary>
            <value>The action to take when a field is missing.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.SupportsMultiline">
            <summary>
            Gets or sets a value indicating if the reader supports multiline fields.
            </summary>
            <value>A value indicating if the reader supports multiline field.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.SkipEmptyLines">
            <summary>
            Gets or sets a value indicating if the reader will skip empty lines.
            </summary>
            <value>A value indicating if the reader will skip empty lines.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.FieldCount">
            <summary>
            Gets the maximum number of fields to retrieve for each record.
            </summary>
            <value>The maximum number of fields to retrieve for each record.</value>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.Item(System.Int32,System.String)">
            <summary>
            Gets the field with the specified name and record position. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name and record position.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.Item(System.Int32,System.Int32)">
            <summary>
            Gets the field at the specified index and record position.
            </summary>
            <value>
            The field at the specified index and record position.
            A <see langword="null"/> is returned if the field cannot be found for the record.
            </value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:InvalidOperationException">
            	Cannot move to a previous record in forward-only mode.
            </exception>
            <exception cref="T:EndOfStreamException">
            	Cannot read record at <paramref name="record"/>.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.Item(System.String)">
            <summary>
            Gets the field with the specified name. <see cref="M:hasHeaders"/> must be <see langword="true"/>.
            </summary>
            <value>
            The field with the specified name.
            </value>
            <exception cref="T:ArgumentNullException">
            	<paramref name="field"/> is <see langword="null"/> or an empty string.
            </exception>
            <exception cref="T:InvalidOperationException">
            The CSV does not have headers (<see cref="M:HasHeaders"/> property is <see langword="false"/>).
            </exception>
            <exception cref="T:ArgumentException">
            	<paramref name="field"/> not found.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="E:OilDigital.Common.Csv.CsvReader.Disposed">
            <summary>
            Occurs when the instance is disposed of.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.IsDisposed">
            <summary>
            Gets a value indicating whether the instance has been disposed of.
            </summary>
            <value>
            	<see langword="true"/> if the instance has been disposed of; otherwise, <see langword="false"/>.
            </value>
        </member>
        <member name="T:OilDigital.Common.Csv.CsvReader.DataReaderValidations">
            <summary>
            Defines the data reader validations.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.DataReaderValidations.None">
            <summary>
            No validation.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.DataReaderValidations.IsInitialized">
            <summary>
            Validate that the data reader is initialized.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.DataReaderValidations.IsNotClosed">
            <summary>
            Validate that the data reader is not closed.
            </summary>
        </member>
        <member name="T:OilDigital.Common.Csv.CsvReader.RecordEnumerator">
            <summary>
            Supports a simple iteration over the records of a <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.RecordEnumerator._reader">
            <summary>
            Contains the enumerated <see cref="T:CsvReader"/>.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.RecordEnumerator._current">
            <summary>
            Contains the current record.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CsvReader.RecordEnumerator._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.RecordEnumerator.#ctor(OilDigital.Common.Csv.CsvReader)">
            <summary>
            Initializes a new instance of the <see cref="T:RecordEnumerator"/> class.
            </summary>
            <param name="reader">The <see cref="T:CsvReader"/> to iterate over.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.RecordEnumerator.MoveNext">
            <summary>
            Advances the enumerator to the next record of the CSV.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next record, <see langword="false"/> if the enumerator has passed the end of the CSV.</returns>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.RecordEnumerator.Reset">
            <summary>
            Sets the enumerator to its initial position, which is before the first record in the CSV.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CsvReader.RecordEnumerator.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.RecordEnumerator.Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.CsvReader.RecordEnumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current record.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader._records">
            <summary>
            Contains the cached records.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader._currentRecordIndex">
            <summary>
            Contains the current record index (inside the cached records array).
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader._readingStream">
            <summary>
            Indicates if a new record is being read from the CSV stream.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader._bindingList">
            <summary>
            Contains the binding list linked to this reader.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:ArgumentException">
            	Cannot read from <paramref name="reader"/>.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.#ctor(System.IO.TextReader,System.Boolean,System.Char,System.Char,System.Char,System.Char,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the CsvReader class.
            </summary>
            <param name="reader">A <see cref="T:TextReader"/> pointing to the CSV file.</param>
            <param name="hasHeaders"><see langword="true"/> if field names are located on the first non commented line, otherwise, <see langword="false"/>.</param>
            <param name="delimiter">The delimiter character separating each field (default is ',').</param>
            <param name="quote">The quotation character wrapping every field (default is ''').</param>
            <param name="escape">
            The escape character letting insert quotation characters inside a quoted field (default is '\').
            If no escape character, set to '\0' to gain some performance.
            </param>
            <param name="comment">The comment character indicating that a line is commented out (default is '#').</param>
            <param name="trimSpaces"><see langword="true"/> if spaces at the start and end of a field are trimmed, otherwise, <see langword="false"/>. Default is <see langword="true"/>.</param>
            <param name="bufferSize">The buffer size in bytes.</param>
            <exception cref="T:ArgumentNullException">
            	<paramref name="reader"/> is a <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            	<paramref name="bufferSize"/> must be 1 or more.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.ReadToEnd">
            <summary>
            Reads the CSV stream from the current position to the end of the stream.
            </summary>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.ReadNextRecord(System.Boolean,System.Boolean)">
            <summary>
            Reads the next record.
            </summary>
            <param name="onlyReadHeaders">
            Indicates if the reader will proceed to the next record after having read headers.
            <see langword="true"/> if it stops after having read headers; otherwise, <see langword="false"/>.
            </param>
            <param name="skipToNextLine">
            Indicates if the reader will skip directly to the next line without parsing the current one. 
            To be used when an error occurs.
            </param>
            <returns><see langword="true"/> if a record has been successfully reads; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            The instance has been disposed of.
            </exception>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.MoveToStart">
            <summary>
            Moves before the first record.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.MoveToLastCachedRecord">
            <summary>
            Moves to the last record read so far.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.MoveTo(System.Int64)">
            <summary>
            Moves to the specified record index.
            </summary>
            <param name="record">The record index.</param>
            <exception cref="T:ArgumentOutOfRangeException">
            	Record index must be > 0.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="P:OilDigital.Common.Csv.CachedCsvReader.CurrentRecordIndex">
            <summary>
            Gets the current record index in the CSV file.
            </summary>
            <value>The current record index in the CSV file.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CachedCsvReader.EndOfStream">
            <summary>
            Gets a value that indicates whether the current stream position is at the end of the stream.
            </summary>
            <value><see langword="true"/> if the current stream position is at the end of the stream; otherwise <see langword="false"/>.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.CachedCsvReader.Item(System.Int32)">
            <summary>
            Gets the field at the specified index.
            </summary>
            <value>The field at the specified index.</value>
            <exception cref="T:ArgumentOutOfRangeException">
            	<paramref name="field"/> must be included in [0, <see cref="M:FieldCount"/>[.
            </exception>
            <exception cref="T:InvalidOperationException">
            	No record read yet. Call ReadLine() first.
            </exception>
            <exception cref="T:OilDigital.Common.Csv.MissingFieldCsvException">
            	The CSV data appears to be missing a field.
            </exception>
            <exception cref="T:MalformedCsvException">
            	The CSV appears to be corrupt at the current position.
            </exception>
            <exception cref="T:System.ComponentModel.ObjectDisposedException">
            	The instance has been disposed of.
            </exception>
        </member>
        <member name="T:OilDigital.Common.Csv.CachedCsvReader.CsvBindingList">
            <summary>
            Represents a binding list wrapper for a CSV reader.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader.CsvBindingList._csv">
            <summary>
            Contains the linked CSV reader.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader.CsvBindingList._count">
            <summary>
            Contains the cached record count.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader.CsvBindingList._properties">
            <summary>
            Contains the cached property descriptors.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader.CsvBindingList._sort">
            <summary>
            Contains the current sort property.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader.CsvBindingList._direction">
            <summary>
            Contains the current sort direction.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.CsvBindingList.#ctor(OilDigital.Common.Csv.CachedCsvReader)">
            <summary>
            Initializes a new instance of the CsvBindingList class.
            </summary>
            <param name="csv"></param>
        </member>
        <member name="T:OilDigital.Common.Csv.CachedCsvReader.CsvPropertyDescriptor">
            <summary>
            Represents a CSV field property descriptor.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader.CsvPropertyDescriptor._index">
            <summary>
            Contains the field index.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.CsvPropertyDescriptor.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the CsvPropertyDescriptor class.
            </summary>
            <param name="fieldName">The field name.</param>
            <param name="index">The field index.</param>
        </member>
        <member name="P:OilDigital.Common.Csv.CachedCsvReader.CsvPropertyDescriptor.Index">
            <summary>
            Gets the field index.
            </summary>
            <value>The field index.</value>
        </member>
        <member name="T:OilDigital.Common.Csv.CachedCsvReader.CsvRecordComparer">
            <summary>
            Represents a CSV record comparer.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader.CsvRecordComparer._field">
            <summary>
            Contains the field index of the values to compare.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.CachedCsvReader.CsvRecordComparer._direction">
            <summary>
            Contains the sort direction.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.CachedCsvReader.CsvRecordComparer.#ctor(System.Int32,System.ComponentModel.ListSortDirection)">
            <summary>
            Initializes a new instance of the CsvRecordComparer class.
            </summary>
            <param name="field">The field index of the values to compare.</param>
            <param name="direction">The sort direction.</param>
        </member>
        <member name="T:OilDigital.Common.Csv.ParseErrorEventArgs">
            <summary>
            Provides data for the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.ParseErrorEventArgs._error">
            <summary>
            Contains the error that occured.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.ParseErrorEventArgs._action">
            <summary>
            Contains the action to take.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.ParseErrorEventArgs.#ctor(OilDigital.Common.Csv.MalformedCsvException,OilDigital.Common.Csv.ParseErrorAction)">
            <summary>
            Initializes a new instance of the ParseErrorEventArgs class.
            </summary>
            <param name="error">The error that occured.</param>
            <param name="defaultAction">The default action to take.</param>
        </member>
        <member name="P:OilDigital.Common.Csv.ParseErrorEventArgs.Error">
            <summary>
            Gets the error that occured.
            </summary>
            <value>The error that occured.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.ParseErrorEventArgs.Action">
            <summary>
            Gets or sets the action to take.
            </summary>
            <value>The action to take.</value>
        </member>
        <member name="T:OilDigital.Common.Csv.MalformedCsvException">
            <summary>
            Represents the exception that is thrown when a CSV file is malformed.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.MalformedCsvException._message">
            <summary>
            Contains the message that describes the error.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.MalformedCsvException._rawData">
            <summary>
            Contains the raw data when the error occured.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.MalformedCsvException._currentFieldIndex">
            <summary>
            Contains the current field index.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.MalformedCsvException._currentRecordIndex">
            <summary>
            Contains the current record index.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.MalformedCsvException._currentPosition">
            <summary>
            Contains the current position in the raw data.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.MalformedCsvException.#ctor">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.MalformedCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MalformedCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MalformedCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MalformedCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MalformedCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MalformedCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MalformedCsvException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            When overridden in a derived class, sets the <see cref="T:SerializationInfo"/> with information about the exception.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:OilDigital.Common.Csv.MalformedCsvException.RawData">
            <summary>
            Gets the raw data when the error occured.
            </summary>
            <value>The raw data when the error occured.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.MalformedCsvException.CurrentPosition">
            <summary>
            Gets the current position in the raw data.
            </summary>
            <value>The current position in the raw data.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.MalformedCsvException.CurrentRecordIndex">
            <summary>
            Gets the current record index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.MalformedCsvException.CurrentFieldIndex">
            <summary>
            Gets the current field index.
            </summary>
            <value>The current record index.</value>
        </member>
        <member name="P:OilDigital.Common.Csv.MalformedCsvException.Message">
            <summary>
            Gets a message that describes the current exception.
            </summary>
            <value>A message that describes the current exception.</value>
        </member>
        <member name="T:OilDigital.Common.Csv.MissingFieldCsvException">
            <summary>
            Represents the exception that is thrown when a there is a missing field in a record of the CSV file.
            </summary>
            <remarks>
            MissingFieldException would have been a better name, but there is already a <see cref="T:System.MissingFieldException"/>.
            </remarks>
        </member>
        <member name="M:OilDigital.Common.Csv.MissingFieldCsvException.#ctor">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Csv.MissingFieldCsvException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MissingFieldCsvException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MissingFieldCsvException.#ctor(System.String,System.Int32,System.Int64,System.Int32,System.Exception)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class.
            </summary>
            <param name="rawData">The raw data when the error occured.</param>
            <param name="currentPosition">The current position in the raw data.</param>
            <param name="currentRecordIndex">The current record index.</param>
            <param name="currentFieldIndex">The current field index.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:OilDigital.Common.Csv.MissingFieldCsvException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the MissingFieldCsvException class with serialized data.
            </summary>
            <param name="info">The <see cref="T:SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:OilDigital.Common.Csv.MissingFieldAction">
            <summary>
            Specifies the action to take when a field is missing.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.MissingFieldAction.ParseError">
            <summary>
            Treat as a parsing error.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.MissingFieldAction.ReplaceByEmpty">
            <summary>
            Replaces by an empty value.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.MissingFieldAction.ReplaceByNull">
            <summary>
            Replaces by a null value (<see langword="null"/>).
            </summary>
        </member>
        <member name="T:OilDigital.Common.Csv.ParseErrorAction">
            <summary>
            Specifies the action to take when a parsing error has occured.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.ParseErrorAction.RaiseEvent">
            <summary>
            Raises the <see cref="M:CsvReader.ParseError"/> event.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.ParseErrorAction.AdvanceToNextLine">
            <summary>
            Tries to advance to next line.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Csv.ParseErrorAction.ThrowException">
            <summary>
            Throws an exception.
            </summary>
        </member>
        <member name="T:OilDigital.Common.Csv.Resources.ExceptionMessage">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.BufferSizeTooSmall">
            <summary>
              Looks up a localized string similar to Buffer size must be 1 or more..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.CannotMovePreviousRecordInForwardOnly">
            <summary>
              Looks up a localized string similar to Cannot move to a previous record in forward-only mode..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.CannotReadRecordAtIndex">
            <summary>
              Looks up a localized string similar to Cannot read record at index &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.EnumerationFinishedOrNotStarted">
            <summary>
              Looks up a localized string similar to Enumeration has either not started or has already finished..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.EnumerationVersionCheckFailed">
            <summary>
              Looks up a localized string similar to Collection was modified; enumeration operation may not execute..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.FieldHeaderNotFound">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; field header not found..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.FieldIndexOutOfRange">
            <summary>
              Looks up a localized string similar to Field index must be included in [0, FieldCount[. Specified field index was : &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.MalformedCsvException">
            <summary>
              Looks up a localized string similar to The CSV appears to be corrupt near record &apos;{0}&apos; field &apos;{1} at position &apos;{2}&apos;. Current raw data : &apos;{3}&apos;..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.MissingFieldActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported missing field action..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.NoCurrentRecord">
            <summary>
              Looks up a localized string similar to No current record..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.NoHeaders">
            <summary>
              Looks up a localized string similar to The CSV does not have headers (CsvReader.HasHeaders property is false)..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.NotEnoughSpaceInArray">
            <summary>
              Looks up a localized string similar to The number of fields in the record is greater than the available space from index to the end of the destination array..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.ParseErrorActionInvalidInsideParseErrorEvent">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a valid ParseErrorAction while inside a ParseError event..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.ParseErrorActionNotSupported">
            <summary>
              Looks up a localized string similar to &apos;{0}&apos; is not a supported ParseErrorAction..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.ReaderClosed">
            <summary>
              Looks up a localized string similar to This operation is invalid when the reader is closed..
            </summary>
        </member>
        <member name="P:OilDigital.Common.Csv.Resources.ExceptionMessage.RecordIndexLessThanZero">
            <summary>
              Looks up a localized string similar to Record index must be 0 or more..
            </summary>
        </member>
        <member name="T:OilDigital.Common.DateTimeHelper">
            <summary>
            日期类型相关的助手类
            </summary>
        </member>
        <member name="M:OilDigital.Common.DateTimeHelper.ToLastSecond(System.DateTime)">
            <summary>
            获取给定日期的最后一秒,如给定的是2008-1-3,那么返回这个日期的最后一秒2008-1-3 23:59:59:999
            </summary>
            <param name="date">给定的日期</param>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.IToJSON">
            <summary>
            可以将对象转换为JSON字符串的接口
            </summary>
        </member>
        <member name="M:OilDigital.Common.IToJSON.ToJSON(System.Char,System.Char,System.Char)">
            <summary>
            将对象转换为JSON字符串
            </summary>
            <param name="delimitorForProperty">分割属性的字符</param>
            <param name="delimitorForData">分割数据的字符</param>
            <param name="delimitorForObject">分割对象的字符</param>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.IUserIdentity">
            <summary>
            用户身份信息
            </summary>
        </member>
        <member name="M:OilDigital.Common.IUserIdentity.GetProfileValue(System.String)">
            <summary>
            Gets the profile value.
            </summary>
            <param name="profileName">Name of the profile.</param>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.IUserIdentity.UserId">
            <summary>
            用户ID
            </summary>
        </member>
        <member name="P:OilDigital.Common.IUserIdentity.UserName">
            <summary>
            用户姓名
            </summary>
        </member>
        <member name="T:OilDigital.Common.Log.AuditLogException">
            <summary>
            审核日志异常类
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.Log.AuditLogException"/> class.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.Log.AuditLogException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.Log.AuditLogException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="T:OilDigital.Common.Log.SQLAuditLogProvider">
            <summary>
            基于直接sql的操作的数据审核日志提供者
            </summary>
        </member>
        <member name="T:OilDigital.Common.Log.AuditLogProvider">
            <summary>
            数据审核日志提供者基类
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogProvider.Log(OilDigital.Common.Log.IWebAuditLog)">
            <summary>
            将操作保存到日志中
            </summary>
            <param name="log"></param>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogProvider.GetLogsByEntityId(System.String,System.String)">
            <summary>
            Gets the logs by entity id.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogProvider.GetLogsByParentId(System.String,System.String)">
            <summary>
            Gets the logs by parent id.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="parentId">The parent id.</param>
            <returns></returns>
        </member>
        <member name="F:OilDigital.Common.Log.SQLAuditLogProvider.enabled">
            <summary>
            是否enabled
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.SQLAuditLogProvider.Log(OilDigital.Common.Log.IWebAuditLog)">
            <summary>
            save log object,使用配置的数据库链接字符串来执行.
            </summary>
            <param name="log"><see cref="T:OilDigital.Common.Log.IWebAuditLog"/> instance </param>
        </member>
        <member name="M:OilDigital.Common.Log.SQLAuditLogProvider.Log(OilDigital.Common.Log.IWebAuditLog,System.Data.IDbConnection)">
            <summary>
            Logs the specified log.使用指定的数据库连接来执行,目前只是支持 Ms Sql 的连接对象SqlConnection
            </summary>
            <param name="log">The log.</param>
            <param name="connection">The connection.</param>
        </member>
        <member name="M:OilDigital.Common.Log.SQLAuditLogProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            从配置文件初始化
            </summary>
            <param name="name"></param>
            <param name="config"></param>
        </member>
        <member name="M:OilDigital.Common.Log.SQLAuditLogProvider.ExtractConfigValue(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            A helper function to retrieve config values from the configuration file and remove the entry.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Log.SQLAuditLogProvider.GetLogsByEntityId(System.String,System.String)">
            <summary>
            获取某个类名下面的实体的所有相关修改记录
            </summary>
            <param name="className">Name of the class.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Log.SQLAuditLogProvider.GetLogsByParentId(System.String,System.String)">
            <summary>
            Gets the logs by parent id.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="parentId">The parent id.</param>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.NoRightException">
            <summary>
            没有权限执行操作异常
            </summary>
        </member>
        <member name="M:OilDigital.Common.NoRightException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.NoRightException"/> class.
            </summary>
        </member>
        <member name="M:OilDigital.Common.NoRightException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.NoRightException"/> class.
            </summary>
            <param name="operationName">Name of the operation.</param>
        </member>
        <member name="T:OilDigital.Common.ObjectConvert">
            <summary>
            字符串和对象之间的转换的基类
            </summary>
        </member>
        <member name="M:OilDigital.Common.ObjectConvert.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:OilDigital.Common.ObjectConvert.#ctor(System.Char,System.Char,System.Char)">
            <summary>
            构造一个从字符串变换为对象的类的实例
            </summary>
            <param name="delimitorForProperty">分割属性和值的分割字符</param>
            <param name="delimitorForData">分割每个数据项之间的字符</param>
            <param name="delimitorForObject">连个对象之间的分割字符</param>
        </member>
        <member name="F:OilDigital.Common.ObjectConvert.delimitorForData">
            <summary>
            分割数据的字符,如何分隔两个属性-值对;
            </summary>
        </member>
        <member name="M:OilDigital.Common.ObjectConvert.ToHashtable(System.String)">
            <summary>
            识别字符串中的数据,将数据保存到hashtable中
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.ObjectConvert.GetStringFromHashtable(System.Collections.Hashtable,System.String)">
            <summary>
            从hashtable中取出数据,并确保key在hashtable中存在值
            </summary>
            <param name="ht">hashtable实例</param>
            <param name="key">key值</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.ObjectConvert.GetStringFromHashtable(System.Collections.Hashtable,System.String,System.Boolean)">
            <summary>
            从hashtable中取数据
            </summary>
            <param name="ht">hashtable</param>
            <param name="key">key值</param>
            <param name="mustContainKey">是否确保hashtable中存在该key</param>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.ObjectConvert.DelimitorForData">
            <summary>
            分割每个数据项之间的字符
            </summary>
        </member>
        <member name="P:OilDigital.Common.ObjectConvert.DelimitorForProperty">
            <summary>
            分割属性和数据的字符
            </summary>
        </member>
        <member name="P:OilDigital.Common.ObjectConvert.DelimitorForObject">
            <summary>
            两个对象之间的分割字符: 当有多个对象需要合并组成字符串时,如何分隔两个对象
            </summary>
        </member>
        <member name="T:OilDigital.Common.OperationType">
            <summary>
            票据操作类型:增加,删除,修改,打印
            </summary>
        </member>
        <member name="M:OilDigital.Common.OperationType.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.OperationType"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="F:OilDigital.Common.OperationType.adding">
            <summary>
            增加操作
            </summary>
        </member>
        <member name="F:OilDigital.Common.OperationType.deleting">
            <summary>
            删除操作
            </summary>
        </member>
        <member name="F:OilDigital.Common.OperationType.editing">
            <summary>
            修改操作
            </summary>
        </member>
        <member name="F:OilDigital.Common.OperationType.printing">
            <summary>
            打印操作
            </summary>
        </member>
        <member name="M:OilDigital.Common.OperationType.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:OilDigital.Common.OperationType.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:OilDigital.Common.OperationType.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:OilDigital.Common.OperationType.op_Equality(OilDigital.Common.OperationType,OilDigital.Common.OperationType)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="obj1">The obj1.</param>
            <param name="obj2">The obj2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="M:OilDigital.Common.OperationType.op_Inequality(OilDigital.Common.OperationType,OilDigital.Common.OperationType)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="obj1">The obj1.</param>
            <param name="obj2">The obj2.</param>
            <returns>The result of the operator.</returns>
        </member>
        <member name="P:OilDigital.Common.OperationType.Adding">
            <summary>
            Gets the 增加操作.
            </summary>
            <value>The adding.</value>
        </member>
        <member name="P:OilDigital.Common.OperationType.Deleting">
            <summary>
            Gets or sets the 删除操作.
            </summary>
            <value>The deleting.</value>
        </member>
        <member name="P:OilDigital.Common.OperationType.Editing">
            <summary>
            Gets or sets the 修改操作.
            </summary>
            <value>The updating.</value>
        </member>
        <member name="P:OilDigital.Common.OperationType.Printing">
            <summary>
            Gets or sets the 打印操作.
            </summary>
            <value>The printing.</value>
        </member>
        <member name="T:OilDigital.Common.OperationTicket">
            <summary>
            操作票据类,有了票据才可执行某个操作
            </summary>
        </member>
        <member name="M:OilDigital.Common.OperationTicket.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.OperationTicket"/> class.
            </summary>
        </member>
        <member name="M:OilDigital.Common.OperationTicket.#ctor(System.DateTime,System.Nullable{System.DateTime},System.String,System.String,OilDigital.Common.OperationType,System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.OperationTicket"/> class.
            </summary>
            <param name="startTime">The start time.</param>
            <param name="endTime">The end time.</param>
            <param name="fromUser">From user.</param>
            <param name="toUser">To user.</param>
            <param name="type">The type.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetId">The target id.</param>
        </member>
        <member name="M:OilDigital.Common.OperationTicket.ToString">
            <summary>
            Returns a <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </summary>
            <returns>
            A <see cref="T:System.String"></see> that represents the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:OilDigital.Common.OperationTicket.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="P:OilDigital.Common.OperationTicket.StartTime">
            <summary>
            Gets or sets the 票据开始的有效期
            </summary>
            <value>The start time.</value>
        </member>
        <member name="P:OilDigital.Common.OperationTicket.EndTime">
            <summary>
            Gets or sets 票据的失效期,null为无限有效期的票据
            </summary>
            <value>The end time.</value>
        </member>
        <member name="P:OilDigital.Common.OperationTicket.FromUser">
            <summary>
            Gets or sets 发出票据的用户
            </summary>
            <value>From user.</value>
        </member>
        <member name="P:OilDigital.Common.OperationTicket.ToUser">
            <summary>
            Gets or sets 票据的接收者
            </summary>
            <value>To user.</value>
        </member>
        <member name="P:OilDigital.Common.OperationTicket.Type">
            <summary>
            Gets or sets the 票据的操作类型
            </summary>
            <value>The type.</value>
        </member>
        <member name="P:OilDigital.Common.OperationTicket.TargetType">
            <summary>
            Gets or sets the 操作目标的类型
            </summary>
            <value>The type of the target.</value>
        </member>
        <member name="P:OilDigital.Common.OperationTicket.TargetId">
            <summary>
            操作目标的Id
            </summary>
            <value>The target id.</value>
        </member>
        <member name="T:OilDigital.Common.OperationTicketService">
            <summary>
            提供操作票据服务的类
            </summary>
        </member>
        <member name="M:OilDigital.Common.OperationTicketService.AddTicket(OilDigital.Common.OperationTicket)">
            <summary>
            Adds the ticket.
            </summary>
            <param name="ticket">The ticket.</param>
        </member>
        <member name="M:OilDigital.Common.OperationTicketService.GetTicketsForUser(System.String)">
            <summary>
            获取某个人所有有效的票据
            </summary>
            <param name="userName">Name of the user.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.OperationTicketService.GetTicketsForUser(System.String,OilDigital.Common.OperationType,System.String,System.Int32)">
            <summary>
            获取某个用户的可用票据
            </summary>
            <param name="userName">用户名</param>
            <param name="operation">操作类型</param>
            <param name="targetType">操作目标的类型</param>
            <param name="targetId">操作目标的Id</param>
            <returns>返回可用票据的集合</returns>
        </member>
        <member name="M:OilDigital.Common.OperationTicketService.GetValidOperationTickets(System.String,OilDigital.Common.OperationType,System.String,System.Int32)">
            <summary>
            Gets the valid operation tickets for special use and special operation.
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="operation">The operation.</param>
            <param name="targetType">Type of the target.</param>
            <param name="targetId">The target id.</param>
            <returns>如果存在满足要求的Ticket那么返回这个Ticket对象,否则返回null</returns>
        </member>
        <member name="M:OilDigital.Common.OperationTicketService.GetValidAddingTickets(System.String,System.String)">
            <summary>
            获取一个有效的新增操作的票据
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="targetType">Type of the target.</param>
            <returns>如果存在满足要求的Ticket那么返回这个Ticket对象,否则返回null</returns>
        </member>
        <member name="M:OilDigital.Common.OperationTicketService.GetValidGenericTickets(System.String,OilDigital.Common.OperationType,System.String)">
            <summary>
            获取一个一般化的操作的票据,这个票据不针对某一个具体的对象,而是一个笼统的。如果需要一个对象明确的操作票据请使用<see cref="M:OilDigital.Common.OperationTicketService.GetValidOperationTickets(System.String,OilDigital.Common.OperationType,System.String,System.Int32)"/>
            </summary>
            <param name="userName">Name of the user.</param>
            <param name="operation">The operation.</param>
            <param name="targetType">Type of the target.</param>
            <returns>如果存在满足要求的Ticket那么返回这个Ticket对象,否则返回null</returns>
        </member>
        <member name="M:OilDigital.Common.OperationTicketService.RemoveUnvalid">
            <summary>
            Removes the 无效的ticket
            </summary>
        </member>
        <member name="T:OilDigital.Common.Web.ArrayToHTMLString">
            <summary>
            将一个数组的数组导出为excel格式的字符串
            </summary>
        </member>
        <member name="P:OilDigital.Common.Web.ArrayToHTMLString.Title">
            <summary>
            excel中的标题
            </summary>
        </member>
        <member name="P:OilDigital.Common.Web.ArrayToHTMLString.ShowNo">
            <summary>
            显示序号否?
            </summary>
        </member>
        <member name="T:OilDigital.Common.Web.AttachmentHelper">
            <summary>
            附件处理助手类
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.AttachmentHelper.ToLink(System.String,System.String,System.String,System.Web.UI.WebControls.RepeatLayout,System.Web.UI.WebControls.RepeatDirection,System.Int32)">
            <summary>
            将特定的文件名组成的字符串,转换为链接html,其链接排列方向为横向
            </summary>
            <param name="filesString">文件名称串</param>
            <param name="delimiter">分割字符串</param>
            <param name="basePath">链接的基本路径</param>
            <param name="layout">展开的样式<seealso cref="T:System.Web.UI.WebControls.RepeatLayout"/>枚举类型实例</param>
            <param name="direction">展开的方向<seealso cref="T:System.Web.UI.WebControls.RepeatDirection"/>枚举类型实例</param>
            <param name="repeatColumn">重复列数(大于等于0),为0时表示无限列</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.AttachmentHelper.ToLink(System.String,System.String,System.String,System.Web.UI.WebControls.RepeatLayout,System.Web.UI.WebControls.RepeatDirection,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            将特定的文件名组成的字符串,转换为链接html,其链接排列方向为横向
            </summary>
            <param name="filesString">文件名称串</param>
            <param name="delimiter">分割字符串</param>
            <param name="basePath">链接的基本路径</param>
            <param name="layout">展开的样式<seealso cref="T:System.Web.UI.WebControls.RepeatLayout"/>枚举类型实例</param>
            <param name="direction">展开的方向<seealso cref="T:System.Web.UI.WebControls.RepeatDirection"/>枚举类型实例</param>
            <param name="repeatColumn">重复列数(大于等于0),为0时表示无限列</param>
            <param name="showIndex">if set to <c>true</c> 显示附件序号</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.AttachmentHelper.GetHref(System.String,System.String,System.Boolean)">
            <summary>
            文件名转换为链接
            </summary>
            <param name="fileName">Name of the file.</param>
            <param name="basePath">The base path.</param>
            <param name="saveByYear">if set to <c>true</c> [save by year].</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.AttachmentHelper.GetName(System.String)">
            <summary>
            获取文件名的显示名称,去除下划线前面的部分
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.AttachmentHelper.CheckArguments(System.String,System.String,System.String)">
            <summary>
            校验参数
            </summary>
            <param name="filesString"></param>
            <param name="delimiter"></param>
            <param name="basePath"></param>
        </member>
        <member name="T:OilDigital.Common.Web.ExportExcelHelper">
            <summary>
            导出Excel的助手类,可以将某些类型的数据导出为excel格式的文件
            </summary>
        </member>
        <member name="F:OilDigital.Common.Web.ExportExcelHelper.extension">
            <summary>
            文件的缺省扩展名,缺省为xls
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.SetFileExtName(System.String,System.Boolean)">
            <summary>
            设置导出文件的扩展名.如xls,et等
            <remarks>对于那些特殊的单位,需要将excel改为wps的格式(et),此时可以在引用程序初始化的时候调用此方法设置全局导出扩展名</remarks>
            <param name="isForcible">是否强制转换:如果在调用导出方法,文件名参数中带有后缀,那么在后缀不一致是是否强制转换为制定的后缀.</param>
            </summary>
            <param name="ext"></param>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.GetExtension">
            <summary>
            返回导出时文件的扩展名
            </summary>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.ProcessName(System.String)">
            <summary>
            处理文件名:1.采用urlencode来编码中文文件名,2.如果文件没有扩展名,那么自动增加扩展名
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.ExportGridView(System.String,System.Web.UI.WebControls.GridView)">
            <summary>
            将gridView中的内容导出为excell
            </summary>
            <param name="fileName">在客户端看到的excel文件名</param>
            <param name="gv">需要导出的gridview实例</param>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.ExportGridView(System.String,System.Web.UI.WebControls.GridView,System.Boolean)">
            <summary>
            将gridView中的内容导出为excell
            </summary>
            <param name="fileName">在客户端看到的excel文件名</param>
            <param name="gv">需要导出的gridview实例</param>
            <param name="showBorder">if set to <c>true</c> [show border].</param>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.PrepareControlForExport(System.Web.UI.Control)">
            <summary>
            Replace any of the contained controls with literals
            </summary>
            <param name="control"></param>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.ExportString(System.String,System.String)">
            <summary>
            将字符串表示的HTML表格导出为Excel文件,
            </summary>
            <param name="fileName">导出的文件名</param>
            <param name="tableHTML">html格式的字符串,如果对输出的样式,请将修饰样式包含其中,如果需要生成表头,那么请将表头放到表格中.</param>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.ExportArray(System.String,System.String[][],System.String,System.String[],System.Boolean,System.Boolean[])">
            <summary>
            将一个数组的数组导出为excel文件
            </summary>
            <param name="fileName">Name of the file.(不包含后缀)</param>
            <param name="data">The data.</param>
            <param name="title">The title.excel的标题</param>
            <param name="header">The header.导出的表头</param>
            <param name="isShowRowNo">if set to <c>true</c> 是否显示行号.</param>
            <param name="colVisibleFlagArray">哪些列需要导出</param>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.ExportHtmlTable(System.String,System.Web.UI.HtmlControls.HtmlTable)">
            <summary>
            导出htmlTable对象为excel表格
            </summary>
            <param name="strFileName">Name of the STR file.</param>
            <param name="ht">The ht.</param>
        </member>
        <member name="M:OilDigital.Common.Web.ExportExcelHelper.ExportTable(System.String,System.Web.UI.WebControls.Table)">
            <summary>
            导出Table对象为excel对象.
            </summary>
            <param name="strFileName">Name of the STR file.</param>
            <param name="table">The ht.</param>
        </member>
        <member name="T:OilDigital.Common.Web.PathProvider">
            <summary>
            文件路径提供者对象
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.PathProvider.CreateProviderBaseOnPhysical(System.String)">
            <summary>
            创建一个基于物理目录的路径信息提供者对象
            </summary>
            <param name="basePath">物理目录</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.PathProvider.CreateProviderBaseOnWeb(System.String)">
            <summary>
            创建一个基于web中现对目录的目录信息提供者
            </summary>
            <param name="basePath">以~/开头的相对目录</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.PathProvider.GetFullPhysicialPath(System.String)">
            <summary>
            获取完整的物理路径
            </summary>
            <param name="fileName">文件名称(包含后缀)</param>
            <returns>返回该文件的物理路径</returns>
        </member>
        <member name="M:OilDigital.Common.Web.PathProvider.GetAbsoluteUrl(System.String)">
            <summary>
            获取文件的绝对Url地址
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.PathProvider.GetAppRelativeUrl(System.String)">
            <summary>
            获取文件的相对URL地址相对于引用程序根目录,以~开头
            </summary>
            <param name="fileName">文件名</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.PathProvider.GetBaseFullPhysicialPath">
            <summary>
            获取基本路径的物理目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.Web.PageModelType">
            <summary>
            枚举的页面类型,包含两种类型的页面,一种是对话框(弹出窗口)页面,另一种是正常的页面.
            </summary>
        </member>
        <member name="F:OilDigital.Common.Web.PageModelType.Normal">
            <summary>
            正常页面
            </summary>
        </member>
        <member name="F:OilDigital.Common.Web.PageModelType.Dialog">
            <summary>
            对话框页面
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.PathProviderBaseOnPhysicalPath.GetBaseFullPhysicialPath">
            <summary>
            获取基本路径的物理目录
            </summary>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.PathProviderBaseOnWeb.GetBaseFullPhysicialPath">
            <summary>
            获取基本路径的物理目录
            </summary>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.Web.WebRulesBase">
            <summary>
            基于web Principal的授权规则基类
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.WebRulesBase.#ctor">
            <summary>
            构造一个授权规则类对象
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.WebRulesBase.IsLogin">
            <summary>
            该用户是否已经验证(登录)
            </summary>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.Web.WebRulesBase.currentUser">
            <summary>
            当前线程的用户Principal
            </summary>
        </member>
        <member name="T:OilDigital.Common.ConstructorParams`1">
            <summary>Defines a delegate to a constructor with a params array of weak-typed argument values.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`1">
            <summary>Defines a delegate to a constructor that takes no arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
        </member>
        <member name="T:OilDigital.Common.Constructor`2">
            <summary>Defines a delegate to a constructor that takes a single strong-typed argument.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`3">
            <summary>Defines a delegate to a constructor that takes two strong-typed arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`4">
            <summary>Defines a delegate to a constructor that takes three strong-typed arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`5">
            <summary>Defines a delegate to a constructor that takes four strong-typed arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`6">
            <summary>Defines a delegate to a constructor that takes five strong-typed arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`7">
            <summary>Defines a delegate to a constructor that takes six strong-typed arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`8">
            <summary>Defines a delegate to a constructor that takes seven strong-typed arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`9">
            <summary>Defines a delegate to a constructor that takes eight strong-typed arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Constructor`10">
            <summary>Defines a delegate to a constructor that takes nine strong-typed arguments.</summary>
            <typeparam name="T">The type of the constructed object</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <param name="arg9">The ninth argument value</param>
        </member>
        <member name="T:OilDigital.Common.ProcParams`1">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) with a params array of weak-typed
            argument values.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:OilDigital.Common.Proc`1">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes no arguments</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
        </member>
        <member name="T:OilDigital.Common.Proc`2">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes a single
            strong-typed argument.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
        </member>
        <member name="T:OilDigital.Common.Proc`3">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes two
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
        </member>
        <member name="T:OilDigital.Common.Proc`4">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes three
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
        </member>
        <member name="T:OilDigital.Common.Proc`5">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes four
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Proc`6">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes five
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Proc`7">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes six
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Proc`8">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes seven
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
        </member>
        <member name="T:OilDigital.Common.Proc`9">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes eight
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Proc`10">
            <summary>Defines a delegate to a instance procedure (method that doesn't return anything) that takes nine
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <param name="arg9">The ninth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProcParams`1">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) with a params array of weak-typed
            argument values.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`1">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes nine
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
        </member>
        <member name="T:OilDigital.Common.StaticProc`2">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes a single
            strong-typed argument.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`3">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes two
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`4">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes three
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`5">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes four
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`6">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes five
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`7">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes six
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`8">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes seven
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`9">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes eight
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticProc`10">
            <summary>Defines a delegate to a static procedure (method that doesn't return anything) that takes nine
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <param name="arg9">The ninth argument value</param>
        </member>
        <member name="T:OilDigital.Common.FuncParams`2">
            <summary>Defines a delegate to a instance function (method that return something) with a params array of weak-typed
            argument values.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <param name="target">The target instance (this)</param>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:OilDigital.Common.Func`2">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes no arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="T:OilDigital.Common.Func`3">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes a single
            strong-typed argument.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
        </member>
        <member name="T:OilDigital.Common.Func`4">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes two
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
        </member>
        <member name="T:OilDigital.Common.Func`5">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes three
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
        </member>
        <member name="T:OilDigital.Common.Func`6">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes four
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Func`7">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes five
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Func`8">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes six
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Func`9">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes seven
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
        </member>
        <member name="T:OilDigital.Common.Func`10">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes eight
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
        </member>
        <member name="T:OilDigital.Common.Func`11">
            <summary>Defines a delegate to a instance function (method that returns a value) that takes nine
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the instance method target</typeparam>
            <param name="target">The target instance (this)</param>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <param name="arg9">The ninth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFuncParams`2">
            <summary>Defines a delegate to a static function (method that return something) with a params array of weak-typed
            argument values.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <param name="parameters">The array of argument values (weak-typed)</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`2">
            <summary>Defines a delegate to a static function (method that returns a value) that takes no arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`3">
            <summary>Defines a delegate to a static function (method that returns a value) that takes a single
            strong-typed argument.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`4">
            <summary>Defines a delegate to a static function (method that returns a value) that takes two
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`5">
            <summary>Defines a delegate to a static function (method that returns a value) that takes three
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`6">
            <summary>Defines a delegate to a static function (method that returns a value) that takes four
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`7">
            <summary>Defines a delegate to a static function (method that returns a value) that takes five
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`8">
            <summary>Defines a delegate to a static function (method that returns a value) that takes six
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`9">
            <summary>Defines a delegate to a static function (method that returns a value) that takes seven
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`10">
            <summary>Defines a delegate to a static function (method that returns a value) that takes eight
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
        </member>
        <member name="T:OilDigital.Common.StaticFunc`11">
            <summary>Defines a delegate to a static function (method that returns a value) that takes nine
            strong-typed arguments.</summary>
            <typeparam name="T">The type of the static method target</typeparam>
            <typeparam name="TRet">The type of the return value</typeparam>
            <typeparam name="V1">The type of the first argument</typeparam>
            <param name="arg1">The first argument value</param>
            <typeparam name="V2">The type of the second argument</typeparam>
            <param name="arg2">The second argument value</param>
            <typeparam name="V3">The type of the third argument</typeparam>
            <param name="arg3">The third argument value</param>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <param name="arg4">The fourth argument value</param>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <param name="arg5">The fifth argument value</param>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <param name="arg6">The sixth argument value</param>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <param name="arg7">The seventh argument value</param>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <param name="arg8">The eighth argument value</param>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <param name="arg9">The ninth argument value</param>
        </member>
        <member name="T:OilDigital.Common.ParameterList">
            <summary>This is a "marker" enum used to trigger the automatic matching of a delegate's argument list to the
            reflected method's parameter list. It serves no other purpose other than to to disambiguate the possible overloads
            of the CreateDelegate method.</summary>
        </member>
        <member name="F:OilDigital.Common.ParameterList.Auto">
            <summary>Just a marker value indicating we should build the parameter list based on the delegate signature.</summary>
        </member>
        <member name="T:OilDigital.Common.ParameterCountMismatchException">
            <summary>Exception thrown when the arguments passed to a delegate do not match the parameter count of the method being called</summary>
        </member>
        <member name="M:OilDigital.Common.ParameterCountMismatchException.CheckAndThrow(System.Type,System.String,System.Int32,System.Int32)">
            <summary>Checks the parameter counts and throws a ParameterCountMismatchException if they are not the same.</summary>
            <param name="type">The Type the method is being called against</param>
            <param name="methodName">The method name being called</param>
            <param name="expectedParameterCount">The number of parameters that method expects</param>
            <param name="actualArgumentCount">The number of arguments specified at call time (for Params-type delegates) or at
            CreateDelegate time (for Explicit-type delegates)</param>
        </member>
        <member name="M:OilDigital.Common.ParameterCountMismatchException.#ctor(System.Type,System.String,System.Int32,System.Int32)">
            <summary>Constructs a ParameterCountMismatchException and fills in the error message based on the characteristics 
            specified</summary>
            <param name="type">The Type the method is being called against</param>
            <param name="methodName">The method name being called</param>
            <param name="expectedParameterCount">The number of parameters that method expects</param>
            <param name="actualArgumentCount">The number of arguments specified at call time (for Params-type delegates) or at
            CreateDelegate time (for Explicit-type delegates)</param>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1">
            <summary>Dynamic method wrapper class</summary>
            <typeparam name="T">The type implementing the method desired.</typeparam>
            <remarks>
            You can use any reference or value-type, including built-in primitive types
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor">
            <summary>Represents all instance constructors</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Constructor">
            <summary>Represents all instance constructors</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1">
            <summary>躡er Base class for all Dynamic classes, this class holds all the code generation and is 
            specialized and JITted against the delegate signature</summary>
            <typeparam name="D">The delegate type that we call-through</typeparam>
        </member>
        <member name="F:OilDigital.Common.Dynamic`1.DynamicBase`1.StaticFlags">
            <summary>BindingFlags for public and non-public static methods/fields/properties</summary>
        </member>
        <member name="F:OilDigital.Common.Dynamic`1.DynamicBase`1.InstanceFlags">
            <summary>BindingFlags for public and non-public instance methods/fields/properties</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Constructor">
            <summary>Represents all instance constructors</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Constructor.CreateDelegate(System.Reflection.ConstructorInfo)">
            <summary>Builds a delegate for a constructor</summary>
            <param name="constructorInfo">The ConstructorInfo for the method to wrap</param>
            <returns>A delegate that looks like ConstructorParms&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Constructor.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for a constructor</summary>
            <param name="methodHandle">The RuntimeMethodHandle for the method to wrap</param>
            <returns>A delegate that looks like ConstructorParms&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Constructor.CreateDelegate">
            <summary>Builds a delegate for the default constructor</summary>
            <returns>A delegate that looks like ConstructorParms&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Constructor.CreateDelegate(System.Type[])">
            <summary>Builds a delegate for a constructor that takes several arguments of known types</summary>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like ConstructorParms&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static">
            <summary>Represents a static member.</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field">
            <summary>Represents a static field.</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field.Getter`1">
            <summary>Represents a static field get method</summary>
            <typeparam name="TRet">The return type of the getter (the field type)</typeparam>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field.Getter`1.CreateDelegate(System.Reflection.FieldInfo)">
            <summary>Builds a delegate for a static field getter from a FieldInfo</summary>
            <param name="fieldInfo">The FieldInfo for the field to wrap.</param>
            <returns>A delegate that looks like StaticFuncParms&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field.Getter`1.CreateDelegate(System.RuntimeFieldHandle)">
            <summary>Builds a delegate for a static field getter from a RuntimeFieldHandle</summary>
            <param name="fieldHandle">The RuntimeFieldHandle for the field to wrap.</param>
            <returns>A delegate that looks like StaticFuncParms&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field.Getter`1.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static field getter from a name</summary>
            <param name="fieldName">The name of the field to wrap.</param>
            <returns>A delegate that looks like StaticFuncParms&lt;T, TRet&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field.Setter">
            <summary>Represents a static field setter method</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field.Setter.CreateDelegate(System.Reflection.FieldInfo)">
            <summary>Builds a delegate for a static field setter from a FieldInfo</summary>
            <param name="fieldInfo">The FieldInfo of the field to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field.Setter.CreateDelegate(System.RuntimeFieldHandle)">
            <summary>Builds a delegate for a static field setter from a RuntimeFieldHandle</summary>
            <param name="fieldHandle">The RuntimeFieldHandle of the field to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Field.Setter.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static field setter from a name</summary>
            <param name="fieldName">The name of the field to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property">
            <summary>Represents a static property.</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property.Getter`1">
            <summary>Represents static property-get (methods that return a value)</summary>
            <typeparam name="TRet">The type of the return value (property type)</typeparam>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property.Getter`1.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Builds a delegate for a static property getter from a PropertyInfo</summary>
            <param name="propertyInfo">The PropertyInfo of the property to wrap.</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property.Getter`1.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static property getter from a name</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property.Getter`1.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static property getter from a name and set of parameter (indexer) types</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property.Setter">
            <summary>Represents static property-set (methods that return nothing)</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property.Setter.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Builds a delegate for a static property setter from a PropertyInfo</summary>
            <param name="propertyInfo">The PropertyInfo of the property to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property.Setter.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static property setter from a name</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Property.Setter.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static property setter from a name and set of parameter (indexer) types</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Procedure">
            <summary>Represents a static procedure (method that returns nothing).</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Procedure.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Procedure.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Procedure.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Procedure.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticProcParams&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Function`1">
            <summary>Represents a static function (method that returns a value).</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Function`1.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for a static function (method that returns a value) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Function`1.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for a static function (method that returns a value) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Function`1.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static function (method that returns a value) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Static.Function`1.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static function (method that returns a value) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticFuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance">
            <summary>Represents an instance member.</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1">
            <summary>Represents an instance field.</summary>
            <typeparam name="VF">The type of the field</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1.Getter">
            <summary>Represents an instance field getter method</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1.Getter.CreateDelegate(System.Reflection.FieldInfo)">
            <summary>Builds a delegate for an instance field getter from a FieldInfo</summary>
            <param name="fieldInfo">The FieldInfo for the field to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1.Getter.CreateDelegate(System.RuntimeFieldHandle)">
            <summary>Builds a delegate for an instance field getter from a RuntimeFieldHandle</summary>
            <param name="fieldHandle">The RuntimeFieldHandle for the field to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1.Getter.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance field getter from a name</summary>
            <param name="fieldName">The FieldInfo for the field to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, TRet&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1.Setter">
            <summary>Represents an instance field setter method</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1.Setter.CreateDelegate(System.Reflection.FieldInfo)">
            <summary>Builds a delegate for an instance field setter from a FieldInfo</summary>
            <param name="fieldInfo">The FieldInfo of the field to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1.Setter.CreateDelegate(System.RuntimeFieldHandle)">
            <summary>Builds a delegate for an instance field setter from a RuntimeFieldHandle</summary>
            <param name="fieldHandle">The RuntimeFieldHandle of the field to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Field`1.Setter.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance field setter from a name</summary>
            <param name="fieldName">The name of the field to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1">
            <summary>Represents an instance property.</summary>
            <typeparam name="VP">The type of the property</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1.Getter">
            <summary>Represents an instance property-get (methods that return a value)</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1.Getter.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Builds a delegate for an instance property getter from a PropertyInfo</summary>
            <param name="propertyInfo">The PropertyInfo of the property to wrap.</param>
            <returns>A delegate that looks like FuncParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1.Getter.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance property getter from a name</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <returns>A delegate that looks like FuncParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1.Getter.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance property getter from a name and set of parameter (indexer) types</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like FuncParams&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1.Setter">
            <summary>Represents an instance property-set (methods that return nothing)</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1.Setter.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Builds a delegate for an instance property setter from a PropertyInfo</summary>
            <param name="propertyInfo">The PropertyInfo of the property to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1.Setter.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance property setter from a name</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Property`1.Setter.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance property setter from a name and set of parameter (indexer) types</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Procedure">
            <summary>Represents an instance procedure (method that returns nothing).</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Procedure.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Procedure.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Procedure.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Procedure.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like ProcParams&lt;T&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Function`1">
            <summary>Represents an instance function (method that returns a value).</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Function`1.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like FuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Function`1.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like FuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Function`1.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like FuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Params.Instance.Function`1.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance function (method that returns a value) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like FuncParams&lt;T, TRet&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit">
            <summary>Represents methods that take known-typed argument list</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Constructor">
            <summary>Represents a constructor that takes known-typed argument list</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Constructor.CreateDelegate(System.Reflection.ConstructorInfo)">
            <summary>Builds a delegate for a constructor</summary>
            <param name="constructorInfo">The ConstructorInfo for the method to wrap</param>
            <returns>A delegate that looks like Constructor&lt;T, V1 arg1, ...&gt; </returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Constructor.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for a constructor</summary>
            <param name="methodHandle">The RuntimeMethodHandle for the method to wrap</param>
            <returns>A delegate that looks like Constructor&lt;T, V1 arg1, ...&gt; </returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Constructor.CreateDelegate">
            <summary>Builds a delegate for the default constructor</summary>
            <returns>A delegate that looks like Constructor&lt;T&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Constructor.CreateDelegate(OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for a constructor that takes several arguments of known types as dictated
            by the expected delegate's parameter (indexer) types.</summary>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like Constructor&lt;T, V1 arg1, ...&gt; </returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Constructor.CreateDelegate(System.Type[])">
            <summary>Builds a delegate for a constructor that takes several arguments of known types</summary>
            <param name="parameterTypes">A Type array giving the parameters types to match against</param>
            <returns>A delegate that looks like Constructor&lt;T, V1 arg1, ...&gt; </returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static">
            <summary>Represents a static member.</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1">
            <summary>Represents a static field.</summary>
            <typeparam name="VF">The type of the field</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1.Getter">
            <summary>Represents a static field get method</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1.Getter.CreateDelegate(System.Reflection.FieldInfo)">
            <summary>Builds a delegate for a static field getter from a FieldInfo</summary>
            <param name="fieldInfo">The FieldInfo for the field to wrap.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, VF&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1.Getter.CreateDelegate(System.RuntimeFieldHandle)">
            <summary>Builds a delegate for a static field getter from a RuntimeFieldHandle</summary>
            <param name="fieldHandle">The RuntimeFieldHandle for the field to wrap.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, VF&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1.Getter.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static field getter from a name</summary>
            <param name="fieldName">The name of the field to wrap.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, VF&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1.Setter">
            <summary>Represents a static field setter method</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1.Setter.CreateDelegate(System.Reflection.FieldInfo)">
            <summary>Builds a delegate for a static field setter from a FieldInfo</summary>
            <param name="fieldInfo">The FieldInfo of the field to wrap.</param>
            <returns>A delegate that looks like StaticProc&lt;T, VF&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1.Setter.CreateDelegate(System.RuntimeFieldHandle)">
            <summary>Builds a delegate for a static field setter from a RuntimeFieldHandle</summary>
            <param name="fieldHandle">The RuntimeFieldHandle of the field to wrap.</param>
            <returns>A delegate that looks like StaticProc&lt;T, VF&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Field`1.Setter.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static field setter from a name</summary>
            <param name="fieldName">The name of the field to wrap.</param>
            <returns>A delegate that looks like StaticProc&lt;T, VF&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1">
            <summary>Represents a static property.</summary>
            <typeparam name="VP">The type of the property</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Getter">
            <summary>Represents static property-get (methods that return a value)</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Getter.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Builds a delegate for a static property getter from a PropertyInfo</summary>
            <param name="propertyInfo">The PropertyInfo of the property to wrap.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, VP&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Getter.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static property getter from a name</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, VP&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Getter.CreateDelegate(System.String,OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for a static property getter from a name that takes several arguments of 
            known types as dictated by the expected delegate's parameter (indexer) types.</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Getter.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static property getter from a name and set of parameter (indexer) types</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticFunc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Setter">
            <summary>Represents static property-set (methods that return nothing)</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Setter.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Builds a delegate for a static property setter from a PropertyInfo</summary>
            <param name="propertyInfo">The PropertyInfo of the property to wrap.</param>
            <returns>A delegate that looks like StaticProc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Setter.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static property setter from a name</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <returns>A delegate that looks like StaticProc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Setter.CreateDelegate(System.String,OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for a static property setter from a name that takes several arguments of 
            known types as dictated by the expected delegate's parameter (indexer) types.</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like StaticProc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Property`1.Setter.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static property setter from a name and set of parameter (indexer) types</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticProc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Procedure">
            <summary>Represents a static procedure (method that returns nothing).</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Procedure.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like StaticProc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Procedure.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like StaticProc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Procedure.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like StaticProc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Procedure.CreateDelegate(System.String,OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a name
            that takes several arguments of known types as dictated by the expected delegate's parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like StaticProc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Procedure.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static procedure (method that returns nothing) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticProc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Function`1">
            <summary>Represents a static function (method that returns a value).</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Function`1.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for a static function (method that returns a value) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Function`1.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for a static function (method that returns a value) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Function`1.CreateDelegate(System.String)">
            <summary>Builds a delegate for a static function (method that returns a value) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Function`1.CreateDelegate(System.String,OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for a static function (method that returns a value) from a name 
            that takes several arguments of known types as dictated by the expected delegate's parameter types.</summary>
            <param name="methodName">The name of the property to wrap.</param>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like StaticFunc&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Static.Function`1.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for a static function (method that returns a value) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like StaticFunc&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance">
            <summary>Represents an instance member.</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1">
            <summary>Represents an instance field.</summary>
            <typeparam name="VF">The type of the field</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1.Getter">
            <summary>Represents an instance field getter method</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1.Getter.CreateDelegate(System.Reflection.FieldInfo)">
            <summary>Builds a delegate for an instance field getter from a FieldInfo</summary>
            <param name="fieldInfo">The FieldInfo for the field to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, VF&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1.Getter.CreateDelegate(System.RuntimeFieldHandle)">
            <summary>Builds a delegate for an instance field getter from a RuntimeFieldHandle</summary>
            <param name="fieldHandle">The RuntimeFieldHandle for the field to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, VF&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1.Getter.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance field getter from a name</summary>
            <param name="fieldName">The name of the field to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, VF&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1.Setter">
            <summary>Represents an instance field setter method</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1.Setter.CreateDelegate(System.Reflection.FieldInfo)">
            <summary>Builds a delegate for an instance field setter from a FieldInfo</summary>
            <param name="fieldInfo">The FieldInfo of the field to wrap.</param>
            <returns>A delegate that looks like Proc&lt;T, VF&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1.Setter.CreateDelegate(System.RuntimeFieldHandle)">
            <summary>Builds a delegate for an instance field setter from a RuntimeFieldHandle</summary>
            <param name="fieldHandle">The RuntimeFieldHandle of the field to wrap.</param>
            <returns>A delegate that looks like Proc&lt;T, VF&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Field`1.Setter.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance field setter from a name</summary>
            <param name="fieldName">The name of the field to wrap.</param>
            <returns>A delegate that looks like Proc&lt;T, VF&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1">
            <summary>Represents an instance property.</summary>
            <typeparam name="VP">The type of the property</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Getter">
            <summary>Represents an instance property-get (methods that return a value)</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Getter.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Builds a delegate for an instance property getter from a PropertyInfo</summary>
            <param name="propertyInfo">The PropertyInfo of the property to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, VP&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Getter.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance property getter from a name</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, VP&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Getter.CreateDelegate(System.String,OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for an instance property getter from a name that takes several arguments of 
            known types as dictated by the expected delegate's parameter (indexer) types.</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like Func&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Getter.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance property getter from a name and set of parameter (indexer) types</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like Func&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Setter">
            <summary>Represents an instance property-set (methods that return nothing)</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Setter.CreateDelegate(System.Reflection.PropertyInfo)">
            <summary>Builds a delegate for an instance property setter from a PropertyInfo</summary>
            <param name="propertyInfo">The PropertyInfo of the property to wrap.</param>
            <returns>A delegate that looks like Proc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Setter.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance property setter from a name</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <returns>A delegate that looks like Proc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Setter.CreateDelegate(System.String,OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for an instance property setter from a name that takes several arguments of 
            known types as dictated by the expected delegate's parameter (indexer) types.</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like Proc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Property`1.Setter.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance property setter from a name and set of parameter (indexer) types</summary>
            <param name="propertyName">The name of the property to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like Proc&lt;T, VP, V1 arg1, ...&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Procedure">
            <summary>Represents an instance procedure (method that returns nothing).</summary>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Procedure.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like Proc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Procedure.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like Proc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Procedure.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like Proc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Procedure.CreateDelegate(System.String,OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a name
            that takes several arguments of known types as dictated by the expected delegate's parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like Proc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Procedure.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance procedure (method that returns nothing) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like Proc&lt;T, V1 arg1, ...&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Function`1">
            <summary>Represents an instance function (method that returns a value).</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Function`1.CreateDelegate(System.Reflection.MethodInfo)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a MethodInfo.</summary>
            <param name="methodInfo">The MethodInfo of the method to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Function`1.CreateDelegate(System.RuntimeMethodHandle)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a RuntimeMethodHandle.</summary>
            <param name="methodHandle">The RuntimeMethodHandle of the method to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Function`1.CreateDelegate(System.String)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a name.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <returns>A delegate that looks like Func&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Function`1.CreateDelegate(System.String,OilDigital.Common.ParameterList)">
            <summary>Builds a delegate for an instance function (method that returns a value) from a name 
            that takes several arguments of known types as dictated by the expected delegate's parameter types.</summary>
            <param name="methodName">The name of the property to wrap.</param>
            <param name="flag">A marker that indicated automatic matching against the expected delegate should be done.</param>
            <returns>A delegate that looks like Func&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="M:OilDigital.Common.Dynamic`1.DynamicBase`1.Explicit.Instance.Function`1.CreateDelegate(System.String,System.Type[])">
            <summary>Builds a delegate for an instance function (method that returns a value) from a name
            and set of parameter types.</summary>
            <param name="methodName">The name of the method to wrap.</param>
            <param name="parameterTypes">A Type array giving the parameter types to match against</param>
            <returns>A delegate that looks like Func&lt;T, TRet, V1 arg1, ...&gt;</returns>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit">
            <summary>Represents a constructor that takes known-typed argument list (empty)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`1">
            <summary>Represents constructor that takes known-typed argument list (one argument)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`2">
            <summary>Represents constructor that takes known-typed argument list (two arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`3">
            <summary>Represents constructor that takes known-typed argument list (three arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`4">
            <summary>Represents constructor that takes known-typed argument list (four arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`5">
            <summary>Represents constructor that takes known-typed argument list (five arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`6">
            <summary>Represents constructor that takes known-typed argument list (six arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`7">
            <summary>Represents constructor that takes known-typed argument list (seven arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`8">
            <summary>Represents constructor that takes known-typed argument list (eight arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Constructor.Explicit`9">
            <summary>Represents constructor that takes known-typed argument list (nine arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static">
            <summary>Represents static methods (no "this" instance passed)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Field`1">
            <summary>Represents the static fields (for Get and/or Set)</summary>
            <typeparam name="VF">The type of the field</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Field`1.Getter">
            <summary>Represents a field-getter.</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Field`1.Setter">
            <summary>Represents a field-setter.</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1">
            <summary>Represents the static properties (for Get and/or Set with/with-out indexers)</summary>
            <typeparam name="VP">The type of the property</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Params.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Params.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit">
            <summary>Represents methods that take known-typed argument list (no indexer)</summary>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit.Setter">
            <summary>property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`1">
            <summary>Represents methods that take known-typed argument list (one indexer argument)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`1.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`1.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`2">
            <summary>Represents methods that take known-typed argument list (two indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`2.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`2.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`3">
            <summary>Represents methods that take known-typed argument list (three indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`3.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`3.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`4">
            <summary>Represents methods that take known-typed argument list (four indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`4.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`4.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`5">
            <summary>Represents methods that take known-typed argument list (five indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <typeparam name="V5">The type of the fifth indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`5.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`5.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`6">
            <summary>Represents methods that take known-typed argument list (six indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <typeparam name="V5">The type of the fifth indexer argument</typeparam>
            <typeparam name="V6">The type of the sixth indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`6.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`6.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`7">
            <summary>Represents methods that take known-typed argument list (seven indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <typeparam name="V5">The type of the fifth indexer argument</typeparam>
            <typeparam name="V6">The type of the sixth indexer argument</typeparam>
            <typeparam name="V7">The type of the seventh indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`7.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`7.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`8">
            <summary>Represents methods that take known-typed argument list (eight indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <typeparam name="V5">The type of the fifth indexer argument</typeparam>
            <typeparam name="V6">The type of the sixth indexer argument</typeparam>
            <typeparam name="V7">The type of the seventh indexer argument</typeparam>
            <typeparam name="V8">The type of the eighth indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`8.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Property`1.Explicit`8.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure">
            <summary>Represents procedures (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit">
            <summary>Represents methods that take known-typed argument list (empty)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`1">
            <summary>Represents methods that take known-typed argument list (one argument)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`2">
            <summary>Represents methods that take known-typed argument list (two arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`3">
            <summary>Represents methods that take known-typed argument list (three arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`4">
            <summary>Represents methods that take known-typed argument list (four arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`5">
            <summary>Represents methods that take known-typed argument list (five arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`6">
            <summary>Represents methods that take known-typed argument list (six arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`7">
            <summary>Represents methods that take known-typed argument list (seven arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`8">
            <summary>Represents methods that take known-typed argument list (eight arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Procedure.Explicit`9">
            <summary>Represents methods that take known-typed argument list (nine arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1">
            <summary>Represents functions (methods that return a value)</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit">
            <summary>Represents methods that take known-typed argument list (empty)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`1">
            <summary>Represents methods that take known-typed argument list (one argument)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`2">
            <summary>Represents methods that take known-typed argument list (two arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`3">
            <summary>Represents methods that take known-typed argument list (three arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`4">
            <summary>Represents methods that take known-typed argument list (four arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`5">
            <summary>Represents methods that take known-typed argument list (five arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`6">
            <summary>Represents methods that take known-typed argument list (six arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`7">
            <summary>Represents methods that take known-typed argument list (seven arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`8">
            <summary>Represents methods that take known-typed argument list (eight arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Static.Function`1.Explicit`9">
            <summary>Represents methods that take known-typed argument list (nine arguments)</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance">
            <summary>Represents instance methods (those that get a "this" argument)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Field`1">
            <summary>Represents the instance fields (for Get and/or Set</summary>
            <typeparam name="VF">The type of the field</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Field`1.Getter">
            <summary>Represents a field-getter</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Field`1.Setter">
            <summary>Represents a field-setter</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1">
            <summary>Represents the static properties (for Get and/or Set with/with-out indexers</summary>
            <typeparam name="VP">The type of the property</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[])</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Params.Getter">
            <summary>Represents property-get (methods that return a value)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Params.Setter">
            <summary>Represents property-set (methods that return nothing)</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit">
            <summary>Represents methods that take known-typed argument list (no indexer)</summary>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`1">
            <summary>Represents methods that take known-typed argument list (one indexer argument)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`1.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`1.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`2">
            <summary>Represents methods that take known-typed argument list (two indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`2.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`2.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`3">
            <summary>Represents methods that take known-typed argument list (three indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`3.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`3.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`4">
            <summary>Represents methods that take known-typed argument list (four indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`4.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`4.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`5">
            <summary>Represents methods that take known-typed argument list (five indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <typeparam name="V5">The type of the fifth indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`5.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`5.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`6">
            <summary>Represents methods that take known-typed argument list (six indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <typeparam name="V5">The type of the fifth indexer argument</typeparam>
            <typeparam name="V6">The type of the sixth indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`6.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`6.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`7">
            <summary>Represents methods that take known-typed argument list (seven indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <typeparam name="V5">The type of the fifth indexer argument</typeparam>
            <typeparam name="V6">The type of the sixth indexer argument</typeparam>
            <typeparam name="V7">The type of the seventh indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`7.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`7.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`8">
            <summary>Represents methods that take known-typed argument list (eight indexer arguments)</summary>
            <typeparam name="V1">The type of the first indexer argument</typeparam>
            <typeparam name="V2">The type of the second indexer argument</typeparam>
            <typeparam name="V3">The type of the third indexer argument</typeparam>
            <typeparam name="V4">The type of the fourth indexer argument</typeparam>
            <typeparam name="V5">The type of the fifth indexer argument</typeparam>
            <typeparam name="V6">The type of the sixth indexer argument</typeparam>
            <typeparam name="V7">The type of the seventh indexer argument</typeparam>
            <typeparam name="V8">The type of the eighth indexer argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`8.Getter">
            <summary>Represents property-get (methods that return a value</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Property`1.Explicit`8.Setter">
            <summary>Represents property-set (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure">
            <summary>Represents procedures (methods that return nothing</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Params">
            <summary>Represents Late-bound argument list (e.g. params object[]</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit">
            <summary>Represents methods that take known-typed argument list (empty</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`1">
            <summary>Represents methods that take known-typed argument list (one argument</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`2">
            <summary>Represents methods that take known-typed argument list (two arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`3">
            <summary>Represents methods that take known-typed argument list (three arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`4">
            <summary>Represents methods that take known-typed argument list (four arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`5">
            <summary>Represents methods that take known-typed argument list (five arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`6">
            <summary>Represents methods that take known-typed argument list (six arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`7">
            <summary>Represents methods that take known-typed argument list (seven arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`8">
            <summary>Represents methods that take known-typed argument list (eight arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Procedure.Explicit`9">
            <summary>Represents methods that take known-typed argument list (nine arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1">
            <summary>Represents functions (methods that return a value</summary>
            <typeparam name="TRet">The type of the return value</typeparam>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Params">
            <summary>Represents Late-bound argument list (e.g. params object[]</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit">
            <summary>Represents methods with no argument</summary>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`1">
            <summary>Represents methods that take known-typed argument list (one argument</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`2">
            <summary>Represents methods that take known-typed argument list (two arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`3">
            <summary>Represents methods that take known-typed argument list (three arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`4">
            <summary>Represents methods that take known-typed argument list (four arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`5">
            <summary>Represents methods that take known-typed argument list (five arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`6">
            <summary>Represents methods that take known-typed argument list (six arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`7">
            <summary>Represents methods that take known-typed argument list (seven arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`8">
            <summary>Represents methods that take known-typed argument list (eight arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.Dynamic`1.Instance.Function`1.Explicit`9">
            <summary>Represents methods that take known-typed argument list (nine arguments</summary>
            <typeparam name="V1">The type of the first argument</typeparam>
            <typeparam name="V2">The type of the second argument</typeparam>
            <typeparam name="V3">The type of the third argument</typeparam>
            <typeparam name="V4">The type of the fourth argument</typeparam>
            <typeparam name="V5">The type of the fifth argument</typeparam>
            <typeparam name="V6">The type of the sixth argument</typeparam>
            <typeparam name="V7">The type of the seventh argument</typeparam>
            <typeparam name="V8">The type of the eighth argument</typeparam>
            <typeparam name="V9">The type of the ninth argument</typeparam>
            <remarks>
            Argument types must be compatible, but need not exactly match the actual
            method. This means that if the method takes an argument of type object,
            it is legal to define the dynamic delegate as something more type-specific
            </remarks>
        </member>
        <member name="T:OilDigital.Common.DynamicComparer`1">
            <summary>
            动态比较操作,实现ICompare接口.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:OilDigital.Common.SortProperty">
            <summary>
            Internal struct to carry the sorting properties.
            </summary>
        </member>
        <member name="P:OilDigital.Common.SortProperty.Name">
            <summary>
            属性名称
            </summary>
        </member>
        <member name="P:OilDigital.Common.SortProperty.Descending">
            <summary>
            是否降序
            </summary>
        </member>
        <member name="T:OilDigital.Common.EntityHelper">
            <summary>
            Static class with some entity related methods
            </summary>
        </member>
        <member name="M:OilDigital.Common.EntityHelper.ValidateCode(System.String,System.String)">
            <summary>
            Check if the specified code can be used safely (doesn't contain special characters)
            </summary>
            <param name="fieldName"></param>
            <param name="code"></param>
        </member>
        <member name="T:OilDigital.Common.FileHelper">
             <summary>
            文件助手类
             </summary>
        </member>
        <member name="M:OilDigital.Common.FileHelper.ToPhyisicalName(System.String,System.String)">
            <summary>
            将Url相对路径转换为物理路径
            </summary>
            <param name="urlPath">相对于Url根路径的路径值</param>
            <param name="singleFileName">单个文件名(不包含任何路径信息)</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.FileHelper.GetSingleFileName(System.String)">
            <summary>
            从完整路径中获取单个文件名
            </summary>
            <param name="urlPath"></param>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.IAudit">
            <summary>
            Interface used to automatically update UpdateDate and InsertDate fields of an entity using nhibernate interceptor.
            </summary>
        </member>
        <member name="P:OilDigital.Common.IAudit.InsertDate">
            <summary>
            Gets or sets the Insert Data (updated when the entity is first insert in the database)
            </summary>
        </member>
        <member name="P:OilDigital.Common.IAudit.UpdateDate">
            <summary>
            Gets or sets the Update Date (updated each time the entity is updated)
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogClassAttribute.#ctor(System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造一个数据审核Attribute用于修饰类
            </summary>
            <param name="name">类的名称</param>
            <param name="idProperty">该类中的唯一标识属性的名称</param>
            <param name="logInserting">if set to <c>true</c> log inserting.</param>
            <param name="logDeleting">if set to <c>true</c> log deleting.</param>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogClassAttribute.#ctor(System.String,System.String)">
            <summary>
            构造一个数据审核Attribute用于修饰类,在该类的实例插入数据库,或者保存修改,或者删除时都记录日志中
            </summary>
            <param name="name">类的名称</param>
            <param name="idProperty">该类中的唯一标识属性的名称</param>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogClassAttribute.LogInserting">
            <summary>
            Gets or sets a value indicating whether loging inserting action
            </summary>
            <value><c>true</c> if log insertubg; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogClassAttribute.LogDeleting">
            <summary>
            Gets or sets a value indicating whether log deleting.
            </summary>
            <value><c>true</c> if log deleting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogClassAttribute.LogChanging">
            <summary>
            Gets or sets a value indicating whether log changing.
            </summary>
            <value><c>true</c> if [log changing]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogClassAttribute.Name">
            <summary>
            记录到日志中的类型名称
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogClassAttribute.IdProperty">
            <summary>
            唯一标志属性名称
            </summary>
        </member>
        <member name="T:OilDigital.Common.Log.AuditLogAttribute">
            <summary>
            定义属性是否可以被记录到数据审核日志中
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogAttribute.#ctor(System.String)">
            <summary>
             构造一个数据审核Attribute用于修饰类属性,在该属性发生变化是记录它
            </summary>
            <param name="name">保存到日志库时属性的名称</param>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogAttribute.#ctor(System.String,System.Boolean)">
            <summary>
             构造函数
            </summary>
            <param name="name">保存到日志库时属性的名称</param>
            <param name="alwaysLogging">是否总是记录该属性的值,无论执行什么操作,无论其值是否发生变更</param>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogAttribute.#ctor(System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="name">保存到日志库时属性的名称</param>
            <param name="logInserting">if set to <c>true</c> 插入操作时总是记录.</param>
            <param name="logDeleting">if set to <c>true</c> 删除操作时总是记录</param>
            <param name="logChanging">if set to <c>true</c> 修改操作时总是记录</param>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogAttribute.LogInserting">
            <summary>
            Gets or sets a value indicating whether 是否总是在增加操作时记录该属性值
            </summary>
            <value><c>true</c> if log insertubg; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogAttribute.LogDeleting">
            <summary>
            Gets or sets a value indicating whether 是否总是在删除时记录该属性值
            </summary>
            <value><c>true</c> if log deleting; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogAttribute.LogChanging">
            <summary>
            Gets or sets a value indicating whether 是否总是在修改时总记录该属性值,无论其值是否发生变化
            </summary>
            <value><c>true</c> if [log changing]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogAttribute.Name">
            <summary>
            记录到日志中的类型名称
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogAttribute.AlwaysLogging">
            <summary>
            总是记录到日志中(无论该值是否改变,主要用于给其他修改提供参照用,比如最终某个状态下的修改)
            </summary>
        </member>
        <member name="T:OilDigital.Common.Log.ILogable">
            <summary>
            可记录日志接口
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.ILogable.ToLogText">
            <summary>
            将对象记录到日志时转换成的文本
            </summary>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.Log.IWebAuditLog">
            <summary>
            审核日志接口
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.ThreadId">
            <summary>
            修改批次ID
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.UserID">
            <summary>
            修改用户
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.IP">
            <summary>
            修改IP
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.UpdateTime">
            <summary>
            修改日期
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.Action">
            <summary>
            动作名称:修改 or 增加
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.ClassName">
            <summary>
            对象类名称
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.EntityId">
            <summary>
            对象的ID
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.PropertyName">
            <summary>
            对象的属性名称
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.OriginalValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.IWebAuditLog.CurrentVaue">
            <summary>
            对象该属性修改后的值
            </summary>
        </member>
        <member name="T:OilDigital.Common.Log.WebAuditLog">
            <summary>
            数据审核日志,记录用户修改数据的情况
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.WebAuditLog.EntityId">
            <summary>
            实体id
            </summary>
        </member>
        <member name="T:OilDigital.Common.Log.AuditLogProviderCollection">
            <summary>
            数据审核日志Provider集合
            </summary>
        </member>
        <member name="T:OilDigital.Common.Log.AuditLogServiceSection">
            <summary>
            数据审核日志服务提供者配置
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogServiceSection.Providers">
            <summary>
            Gets the providers.
            </summary>
            <value>The providers.</value>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogServiceSection.DefaultProvider">
            <summary>
            缺省provider name
            </summary>
        </member>
        <member name="T:OilDigital.Common.Log.AuditLogService">
            <summary>
            本地人员信息服务者
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogService.LoadProviders">
            <summary>
            加载providers
            </summary>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogService.Log(OilDigital.Common.Log.IWebAuditLog)">
            <summary>
            记录操作日志
            </summary>
            <param name="log">The log instance.</param>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogService.GetLogsByEntityId(System.String,System.String)">
            <summary>
            获取某个类名下面的实体的所有相关修改记录
            </summary>
            <param name="className">Name of the class.</param>
            <param name="id">The id.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Log.AuditLogService.GetLogsByParentId(System.String,System.String)">
            <summary>
            Gets the logs by parent id.
            </summary>
            <param name="className">Name of the class.</param>
            <param name="parentId">The parent id.</param>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogService.Provider">
            <summary>
            缺省提供者
            </summary>
        </member>
        <member name="P:OilDigital.Common.Log.AuditLogService.Providers">
            <summary>
            提供者集合
            </summary>
        </member>
        <member name="T:OilDigital.Common.SqlHelper">
            <summary>
            The SqlHelper class is intended to encapsulate high performance, scalable best practices for 
            common uses of SqlClient
            </summary>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.AttachParameters(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlParameter[])">
            <summary>
            This method is used to attach array of SqlParameters to a SqlCommand.
            
            This method will assign a value of DbNull to any parameter with a direction of
            InputOutput and a value of null.  
            
            This behavior will prevent default values from being used, but
            this will be the less common case than an intended pure output parameter (derived as InputOutput)
            where the user provided no input value.
            </summary>
            <param name="command">The command to which the parameters will be added</param>
            <param name="commandParameters">An array of SqlParameters to be added to command</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Data.DataRow)">
            <summary>
            This method assigns dataRow column values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.AssignParameterValues(System.Data.SqlClient.SqlParameter[],System.Object[])">
            <summary>
            This method assigns an array of values to an array of SqlParameters
            </summary>
            <param name="commandParameters">Array of SqlParameters to be assigned values</param>
            <param name="parameterValues">Array of objects holding the values to be assigned</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],System.Boolean@)">
            <summary>
            This method opens (if necessary) and assigns a connection, transaction, command type and parameters 
            to the provided command
            </summary>
            <param name="command">The SqlCommand to be prepared</param>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="mustCloseConnection"><c>true</c> if the connection was opened by the method, otherwose is false.</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the database specified in 
            the connection string
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the database specified in the connection string 
            using the provided parameters
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(connString, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(connString, "PublishOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored prcedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(conn, CommandType.StoredProcedure, "PublishOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, "PublishOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns no resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "PublishOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns no resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int result = ExecuteNonQuery(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int result = ExecuteNonQuery(conn, trans, "PublishOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             DataSet ds = ExecuteDataset(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             DataSet ds = ExecuteDataset(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[],OilDigital.Common.SqlHelper.SqlConnectionOwnership)">
            <summary>
            Create and prepare a SqlCommand, and call ExecuteReader with the appropriate CommandBehavior.
            </summary>
            <remarks>
            If we created and opened the connection, we want the connection to be closed when the DataReader is closed.
            
            If the caller provided the connection, we want to leave it to them to manage.
            </remarks>
            <param name="connection">A valid SqlConnection, on which to execute this command</param>
            <param name="transaction">A valid SqlTransaction, or 'null'</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParameters to be associated with the command or 'null' if no parameters are required</param>
            <param name="connectionOwnership">Indicates whether the connection parameter was provided by the caller, or created by SqlHelper</param>
            <returns>SqlDataReader containing the results of the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(connString, "GetOrders", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
              SqlDataReader dr = ExecuteReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             SqlDataReader dr = ExecuteReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.String,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(connString, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(conn, "GetOrderCount", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, CommandType.StoredProcedure, "GetOrderCount", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             int orderCount = (int)ExecuteScalar(trans, "GetOrderCount", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlConnection,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(conn, "GetOrders", 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure using "FOR XML AUTO"</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders");
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, CommandType.StoredProcedure, "GetOrders", new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command using "FOR XML AUTO"</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteXmlReader(System.Data.SqlClient.SqlTransaction,System.String,System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             XmlReader r = ExecuteXmlReader(trans, "GetOrders", 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the database specified in 
            the connection string. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.String,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the database specified in the connection string 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.String,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(connString, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, 24);
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlConnection. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>    
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(conn, "GetOrders", ds, new string[] {"orders"}, 24, 36);
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[])">
            <summary>
            Execute a SqlCommand (that returns a resultset and takes no parameters) against the provided SqlTransaction. 
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"});
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Execute a SqlCommand (that returns a resultset) against the specified SqlTransaction
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataSet,System.String[],System.Object[])">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified 
            SqlTransaction using the provided parameter values.  This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <remarks>
            This method provides no access to output parameters or the stored procedure's return value parameter.
            
            e.g.:  
             FillDataset(trans, "GetOrders", ds, new string[]{"orders"}, 24, 36);
            </remarks>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="parameterValues">An array of objects to be assigned as the input values of the stored procedure</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.FillDataset(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.DataSet,System.String[],System.Data.SqlClient.SqlParameter[])">
            <summary>
            Private helper method that execute a SqlCommand (that returns a resultset) against the specified SqlTransaction and SqlConnection
            using the provided parameters.
            </summary>
            <remarks>
            e.g.:  
             FillDataset(conn, trans, CommandType.StoredProcedure, "GetOrders", ds, new string[] {"orders"}, new SqlParameter("@prodid", 24));
            </remarks>
            <param name="connection">A valid SqlConnection</param>
            <param name="transaction">A valid SqlTransaction</param>
            <param name="commandType">The CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="dataSet">A dataset wich will contain the resultset generated by the command</param>
            <param name="tableNames">This array will be used to create table mappings allowing the DataTables to be referenced
            by a user defined name (probably the actual table name)
            </param>
            <param name="commandParameters">An array of SqlParamters used to execute the command</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.UpdateDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
            <summary>
            Executes the respective command for each inserted, updated, or deleted row in the DataSet.
            </summary>
            <remarks>
            e.g.:  
             UpdateDataset(conn, insertCommand, deleteCommand, updateCommand, dataSet, "Order");
            </remarks>
            <param name="insertCommand">A valid transact-SQL statement or stored procedure to insert new records into the data source</param>
            <param name="deleteCommand">A valid transact-SQL statement or stored procedure to delete records from the data source</param>
            <param name="updateCommand">A valid transact-SQL statement or stored procedure used to update records in the data source</param>
            <param name="dataSet">The DataSet used to update the data source</param>
            <param name="tableName">The DataTable used to update the data source.</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.CreateCommand(System.Data.SqlClient.SqlConnection,System.String,System.String[])">
            <summary>
            Simplify the creation of a Sql command object by allowing
            a stored procedure and optional parameters to be provided
            </summary>
            <remarks>
            e.g.:  
             SqlCommand command = CreateCommand(conn, "AddCustomer", "CustomerID", "CustomerName");
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="sourceColumns">An array of string to be assigned as the source columns of the stored procedure parameters</param>
            <returns>A valid SqlCommand object</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQueryTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.  
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteNonQueryTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns no resultset) against the specified
            SqlTransaction using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An int representing the number of rows affected by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDatasetTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the store procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteDatasetTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on row values.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A dataset containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReaderTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>A SqlDataReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalarTypedParams(System.String,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the database specified in 
            the connection string using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteScalarTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a 1x1 resultset) against the specified SqlTransaction
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An object containing the value in the 1x1 resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlConnection,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlConnection 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelper.ExecuteXmlReaderTypedParams(System.Data.SqlClient.SqlTransaction,System.String,System.Data.DataRow)">
            <summary>
            Execute a stored procedure via a SqlCommand (that returns a resultset) against the specified SqlTransaction 
            using the dataRow column values as the stored procedure's parameters values.
            This method will query the database to discover the parameters for the 
            stored procedure (the first time each stored procedure is called), and assign the values based on parameter order.
            </summary>
            <param name="transaction">A valid SqlTransaction object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="dataRow">The dataRow used to hold the stored procedure's parameter values.</param>
            <returns>An XmlReader containing the resultset generated by the command</returns>
        </member>
        <member name="T:OilDigital.Common.SqlHelper.SqlConnectionOwnership">
            <summary>
            This enum is used to indicate whether the connection was provided by the caller, or created by SqlHelper, so that
            we can set the appropriate CommandBehavior when calling ExecuteReader()
            </summary>
        </member>
        <member name="F:OilDigital.Common.SqlHelper.SqlConnectionOwnership.Internal">
            <summary>Connection is owned and managed by SqlHelper</summary>
        </member>
        <member name="F:OilDigital.Common.SqlHelper.SqlConnectionOwnership.External">
            <summary>Connection is owned and managed by the caller</summary>
        </member>
        <member name="T:OilDigital.Common.SqlHelperParameterCache">
            <summary>
            SqlHelperParameterCache provides functions to leverage a static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.DiscoverSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of SqlParameters for a stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">Whether or not to include their return value parameter</param>
            <returns>The parameter array discovered.</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.CloneParameters(System.Data.SqlClient.SqlParameter[])">
            <summary>
            Deep copy of cached SqlParameter array
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <param name="commandParameters">An array of SqlParamters to be cached</param>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            Retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="commandText">The stored procedure name or T-SQL command</param>
            <returns>An array of SqlParamters</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.GetSpParameterSet(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connectionString">A valid connection string for a SqlConnection</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.GetSpParameterSet(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="M:OilDigital.Common.SqlHelperParameterCache.GetSpParameterSetInternal(System.Data.SqlClient.SqlConnection,System.String,System.Boolean)">
            <summary>
            Retrieves the set of SqlParameters appropriate for the stored procedure
            </summary>
            <param name="connection">A valid SqlConnection object</param>
            <param name="spName">The name of the stored procedure</param>
            <param name="includeReturnValueParameter">A bool value indicating whether the return value parameter should be included in the results</param>
            <returns>An array of SqlParameters</returns>
        </member>
        <member name="T:OilDigital.Common.StringHelper">
             <summary>
            字符串相关的助手了,封装了一些常用的静态方法
             </summary>
        </member>
        <member name="M:OilDigital.Common.StringHelper.DateToStringByFormat(System.DateTime,System.String)">
            <summary>
            按特定的格式串格式化日期时间数据
            </summary>
            <param name="date">The date.</param>
            <param name="formatString">The format string.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.DateToGBString(System.DateTime)">
            <summary>
            将日期格式格式化为汉字的格式,如:二〇〇四年三月五日
            </summary>
            <param name="date">The date.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.FormatDateByNow(System.DateTime)">
            <summary>
            按照当前时间,格式化日期的显示,比如显示为23分钟前,3天前等样式
            </summary>
            <param name="time">被格式化的时间日期数据</param>
            <returns>符合中文习惯的时间称呼格式</returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.IntToGBString(System.Int32)">
            <summary>
            将一百以内的数转换为汉字的数,比如11转换为:十一
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.IsIn(System.String,System.String)">
            <summary>
            判断一个字符创是否在某个逗号风格的字符串之中
            </summary>
            <param name="one">需要判断的字符串</param>
            <param name="strings"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.Truncate(System.String,System.Int32)">
            <summary>
            截取字符串使其只显示前面的若干字符，没有显示的字符用...来代表
            </summary>
            <param name="content">被截取的字符串</param>
            <param name="length">需要保留的长度</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.RemoveHTMLTag(System.String)">
            <summary>
            去除Html中的html标记
            </summary>
            <param name="htmlText">带html标记的内容</param>
            <returns>返回纯文本</returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.ToCHSMoney(System.Decimal)">
            
            <summary> 
            转换人民币大小金额 
            </summary> 
            <param name="num">金额</param> 
            <returns>返回大写形式</returns> 
        </member>
        <member name="M:OilDigital.Common.StringHelper.ToCHSNumber(System.Int32)">
            <summary> 
            将数字转换为大写数字,比如:11 变成 拾壹
            </summary> 
            <param name="num">整形数字</param> 
            <returns>返回大写汉字串</returns> 
        </member>
        <member name="M:OilDigital.Common.StringHelper.GetFirstLetter(System.String,System.Char)">
            <summary>
            获取拼音串的首字母组成的字符串,如Wang Lao Wu 返回wlw
            </summary>
            <param name="pinyin">拼音串</param>
            <param name="splitChar">拼音串的分隔字符</param>
            <returns>返回首字母组成的串</returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.ObjectsToArray(System.Collections.IList,System.String[])">
            <summary>
            将对象列表转换为字符串数组的数组,用于ajax grid.如果属性定义错误,或者属性不可读那么返回'n/a'
            </summary>
            <param name="objects">对象列表</param>
            <param name="propertys">属性定义数组,属性的定义格式为:属性名称(可以级联):格式.注意一定有区分属性名称的大小写</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.ObjectsToArray(System.Collections.IList,System.String[],System.Boolean)">
            <summary>
            将对象列表转换为字符串数组的数组,用于ajax grid
            </summary>
            <param name="objects">对象列表</param>
            <param name="propertys">属性定义数组,属性的定义格式为:属性名称(可以级联):格式.注意一定有区分属性名称的大小写</param>
            <param name="shouldThrowException">在属性定义发生错误的时候是否要抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.GetValueFromObject(System.Object,System.String,System.String,System.Boolean)">
            <summary>
            获取对象的某个属性的值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名称可以多级级联</param>
            <param name="outFormatString">输出格式</param>
            <param name="shouldThrowException">是否要抛出异常</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.IdCode15To18(System.String)">
            <summary>
            将15位身份证号码转换为18位
            </summary>
            <param name="idcode">The idcode.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.CompressString(System.String)">
            <summary>
            将字符串用zip压缩,返回zip二进制的base64格式
            </summary>
            <param name="text">The text.</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.StringHelper.DecompressString(System.String)">
            <summary>
            压缩后的base64格式的字符串解压缩陈原始的字符串.
            </summary>
            <param name="compressedText">The compressed text.</param>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.ImportResult">
            <summary>
            导入文本文件的结果
            </summary>
        </member>
        <member name="M:OilDigital.Common.ImportResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.ImportResult"/> class.
            </summary>
        </member>
        <member name="M:OilDigital.Common.ImportResult.AddErrorMessage(System.String)">
            <summary>
            Adds the error message.
            </summary>
            <param name="msg">The MSG.</param>
        </member>
        <member name="P:OilDigital.Common.ImportResult.IsSucessful">
            <summary>
            是否成功
            </summary>
        </member>
        <member name="P:OilDigital.Common.ImportResult.FailureCount">
            <summary>
            失败数量
            </summary>
        </member>
        <member name="P:OilDigital.Common.ImportResult.IgnoredCount">
            <summary>
            Gets or sets the ignored count.
            </summary>
            <value>The ignored count.</value>
        </member>
        <member name="P:OilDigital.Common.ImportResult.ErrorMessage">
            <summary>
            错误信息字符串
            </summary>
            <value>The error message.</value>
        </member>
        <member name="T:OilDigital.Common.ITextFormatProvider">
            <summary>
            文本格式提供者接口,提供如何判断跳过行,如何分割数据等
            </summary>
        </member>
        <member name="M:OilDigital.Common.ITextFormatProvider.IsSkiped(System.String)">
            <summary>
            是否需要跳过
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.ITextFormatProvider.SplitToArray(System.String)">
            <summary>
            分割一行数据为一个数组
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="T:OilDigital.Common.SplitByChar">
            <summary>
            按照特定的分割字符进行分割,用#来注释,空行或只包含空格的行将被跳过
            </summary>
        </member>
        <member name="M:OilDigital.Common.SplitByChar.#ctor">
            <summary>
            构造一个用空格分割内容的分割方法实例
            </summary>
        </member>
        <member name="M:OilDigital.Common.SplitByChar.#ctor(System.String)">
            <summary>
            按照指定的分割字符串来初始化一个分割实例
            </summary>
            <param name="splitChars"></param>
        </member>
        <member name="M:OilDigital.Common.SplitByChar.IsSkiped(System.String)">
            <summary>
            跳过空行,跳过只包含空格的行,跳过#开头的注释行
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.SplitByChar.SplitToArray(System.String)">
            <summary>
            按照分割字符进行分割
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.SplitByChar.SplitChars">
            <summary>
            拆分数据项的字符
            </summary>
        </member>
        <member name="T:OilDigital.Common.ISaveOneLine">
            <summary>
            保存一行数据的接口
            </summary>
        </member>
        <member name="M:OilDigital.Common.ISaveOneLine.SaveOneLine(System.String[],System.String[],System.Int32,System.String@)">
            <summary>
            保存数据,如果保存成功那么返回true,否则返回false,起初五原因在error输出参数中
            </summary>
            <param name="headerAry">标识行被分割后的数组,如果不存在那么为null</param>
            <param name="dataAry">数据被分割成的数组</param>
            <param name="lineNumber">当前处理的行号</param>
            <param name="error">输出参数,如果该行数据有错误,那么返回的错误信息</param>
            <returns>
            如果保存成功那么返回true,否则返回false,起初五原因在error输出参数中
            </returns>
        </member>
        <member name="T:OilDigital.Common.TextFileImportProcess">
            <summary>
            文件导入处理基类
            </summary>
        </member>
        <member name="F:OilDigital.Common.TextFileImportProcess.textFormatProvider">
            <summary>
            分割内容的方法
            </summary>
        </member>
        <member name="F:OilDigital.Common.TextFileImportProcess.saveMethod">
            <summary>
            保存内容的方法
            </summary>
        </member>
        <member name="M:OilDigital.Common.TextFileImportProcess.#ctor(OilDigital.Common.ITextFormatProvider,OilDigital.Common.ISaveOneLine)">
            <summary>
            构造一个文本导入实例,缺省支持的后缀名为.txt和.csv,并在文件中包含头信息
            </summary>
            <param name="textFormatProvider">分割内容的方法</param>
            <param name="saveMethod">保存内容的方法</param>
        </member>
        <member name="M:OilDigital.Common.TextFileImportProcess.#ctor(OilDigital.Common.ITextFormatProvider,OilDigital.Common.ISaveOneLine,System.Boolean)">
            <summary>
            构造一个文本导入实例,缺省支持的后缀名为.txt和.csv
            </summary>
            <param name="textFormatProvider">分割内容的方法</param>
            <param name="saveMethod">保存内容的方法</param>
            <param name="hasHeaders">是否在文件中包含头信息</param>
        </member>
        <member name="F:OilDigital.Common.TextFileImportProcess.headArray">
            <summary>
            标识列所在行被分割后的数组
            </summary>
        </member>
        <member name="M:OilDigital.Common.TextFileImportProcess.CheckFileFormat(System.Web.HttpPostedFile)">
            <summary>
            校验文件后缀,如果匹配那么返回true
            </summary>
            <param name="file"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.TextFileImportProcess.ProcessDataRow(System.String,System.Int32)">
            <summary>
            处理一行数据
            </summary>
            <param name="content"></param>
            <param name="lineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.TextFileImportProcess.IsSkipRow(System.String)">
            <summary>
            是否该行需要跳过
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.TextFileImportProcess.SplitContent(System.String)">
            <summary>
            分割数据行到数组中
            </summary>
            <param name="content"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.TextFileImportProcess.SaveOneRow(System.String[],System.Int32,System.String@)">
            <summary>
            保存一行数据
            </summary>
            <param name="ary"></param>
            <param name="lineNumber"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.TextFileImportProcess.GetName(System.String)">
            <summary>
            获取完整文件路径中文件名
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.TextFileImportProcess.SupportedExtPattern">
            <summary>
            支持的文件扩展名匹配模式(正则表达式)
            </summary>
        </member>
        <member name="P:OilDigital.Common.TextFileImportProcess.AllowFailure">
            <summary>
            是否允许失败的行即出现某行导入失败以后是否允许继续导入剩余的行(缺省为false)
            </summary>
        </member>
        <member name="P:OilDigital.Common.TextFileImportProcess.HasHeaders">
            <summary>
            是否包含头信息
            </summary>
        </member>
        <member name="P:OilDigital.Common.TextFileImportProcess.Headers">
            <summary>
            包含的头信息
            </summary>
        </member>
        <member name="T:OilDigital.Common.Web.AddAndEditPage">
            <summary>
            一个用于编辑数据的通用类，可以实现新增纪录和编辑纪录
            </summary>
        </member>
        <member name="T:OilDigital.Common.Web.BasePage">
            <summary>
            自定义的页面基类，可是实现一些通用的基本功能，包括：获取Id，显示弹出消息，关闭并返回值
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.BasePage.AddLinkedStyleSheet(System.String)">
            <summary>
            动态的增加一个css link
            </summary>
            <param name="stylesheet"></param>
        </member>
        <member name="M:OilDigital.Common.Web.BasePage.GetDoublePara(System.String,System.Double)">
            <summary>
            获取浮点类型的参数
            </summary>
            <param name="paraName">参数名称</param>
            <param name="defaultVal">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.BasePage.GetIntPara(System.String,System.Int32)">
            <summary>
            获取整数类型的参数
            </summary>
            <param name="paraName">参数名称</param>
            <param name="defaultVal">缺省值</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.Web.BasePage.GetStringPara(System.String,System.String)">
            <summary>
            获取字符串类型的参数
            </summary>
            <param name="paraName">参数名称</param>
            <param name="defaultVal">缺省值</param>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.Web.BasePage.Id">
            <summary>
            当页面为编辑状态的时候，通过QueryString传进来的Id(此属性只有在编辑状态的时候才可用，否则抛出异常)
            </summary>
        </member>
        <member name="P:OilDigital.Common.Web.BasePage.BasePath">
            <summary>
            返回应用程序路径,当程序以/结尾(比如应用程序在网站根目录),那么去掉最后的/.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Web.BasePage.PageModel">
            <summary>
            页面打开的方式:<seealso cref="T:OilDigital.Common.Web.PageModelType"/>枚举类型.通过获取页面参数model,来判断当前页面打开的类型.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.AddAndEditPage.DoSave">
            <summary>
            通用的保存数据的模版方法
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.AddAndEditPage.Insert">
            <summary>
            插入新纪录到数据库中
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.AddAndEditPage.Update">
            <summary>
            保存修改
            </summary>
        </member>
        <member name="P:OilDigital.Common.Web.AddAndEditPage.IsNew">
            <summary>
            是否是新增加的
            </summary>
        </member>
        <member name="P:OilDigital.Common.Web.BaseControl.BasePath">
            <summary>
            返回应用程序路径,当程序以/结尾(比如应用程序在网站根目录),那么去掉最后的/.
            </summary>
        </member>
        <member name="P:OilDigital.Common.Web.BaseControl.ApplicationPath">
            <summary>
            应用程序路径,单位网站根目录时候返回/,否则返回虚拟目录如:/wsj
            </summary>
        </member>
        <member name="T:OilDigital.Common.Web.ListControlHelper">
            <summary>
            Summary description for ListControlHelper.
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.ListControlHelper.InitListValue(System.Web.UI.HtmlControls.HtmlSelect,System.String,System.Boolean)">
            <summary>
            给下拉列款赋一个选定值，如果这个值不在下拉列表所列的值的范围内，那么位下拉列表增加一个新的option
            </summary>
            <param name="ddl">HtmlSelect控件的实例</param>
            <param name="val">需要初始化的值</param>
            <param name="isHighlightDisplay">当需要初始化的值不在列表中的时候，是否加亮显示</param>
        </member>
        <member name="M:OilDigital.Common.Web.ListControlHelper.InitListValue(System.Web.UI.WebControls.DropDownList,System.String,System.Boolean)">
            <summary>
            给下拉列款赋一个选定值，如果这个值不在下拉列表所列的值的范围内，那么位下拉列表增加一个新的option
            </summary>
            <param name="ddl">HtmlSelect控件的实例</param>
            <param name="val">需要初始化的值</param>
            <param name="isHighlightDisplay">当需要初始化的值不在列表中的时候，是否加亮显示</param>
        </member>
        <member name="M:OilDigital.Common.Web.ListControlHelper.InitListValue(System.Web.UI.WebControls.DropDownList,System.String)">
            <summary>
            给下拉列款赋一个选定值，如果这个值不在下拉列表所列的值的范围内，那么位下拉列表增加一个新的option
            </summary>
            <param name="ddl">DropDownList控件的实例</param>
            <param name="val">需要初始化的值</param>
        </member>
        <member name="M:OilDigital.Common.Web.ListControlHelper.InitRadioButtonListValue(System.Web.UI.WebControls.RadioButtonList,System.String)">
            <summary>
            设定radio列表的值
            </summary>
            <param name="list"></param>
            <param name="val"></param>
        </member>
        <member name="T:OilDigital.Common.Web.WebUserIdentity">
            <summary>
            基于Web的用户身份
            </summary>
        </member>
        <member name="M:OilDigital.Common.Web.WebUserIdentity.#ctor(System.String,System.String,System.Web.Profile.ProfileBase)">
            <summary>
            Initializes a new instance of the <see cref="T:OilDigital.Common.Web.WebUserIdentity"/> class.
            </summary>
            <param name="userId">The user id.</param>
            <param name="userName">Name of the user.</param>
            <param name="profileBase">The profile base.</param>
        </member>
        <member name="M:OilDigital.Common.Web.WebUserIdentity.GetProfileValue(System.String)">
            <summary>
            Gets the profile value.
            </summary>
            <param name="profileName">Name of the profile.</param>
            <returns></returns>
        </member>
        <member name="P:OilDigital.Common.Web.WebUserIdentity.CurrentUser">
            <summary>
            Gets the current user's Identity.
            </summary>
            <value>The current user.</value>
        </member>
        <member name="T:OilDigital.Common.XmlHelper">
            <summary>
            实现xml和对象之间转换的助手类.
            <remarks>在转换时注意字符串的格式,在调用无编码参数时,默认为UTF8编码</remarks>
            </summary>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.GetNamespaces">
            <summary>
            This will returns the set of included namespaces for the serializer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.FromXml(System.String,System.Type)">
            <summary>
             Creates an object from an XML string.
            </summary>
            <param name="Xml"></param>
            <param name="ObjType"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.FromFile(System.String,System.Type)">
            <summary>
            create object from xml file
            </summary>
            <param name="xmlFileName"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.FromStream(System.IO.Stream,System.Type)">
            <summary>
            从stream中反序列化对象
            </summary>
            <param name="st"></param>
            <param name="objType"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.ToXml(System.Object)">
            <summary>
            Serializes the <i>Obj</i> to an XML string.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj">需要序列化的对象</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.ToXml(System.Object,System.Boolean)">
            <summary>
            Serializes the <i>Obj</i> to an XML string.
            </summary>
            <param name="Obj">需要序列化的对象</param>
            <param name="wellFormatted">是否进行格式美化,为true时,将对xml字符串进行格式美化(自动缩进)</param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.ToXml(System.Object,System.Type)">
            <summary>
            Serializes the <i>Obj</i> to an XML string.
            </summary>
            <param name="Obj"></param>
            <param name="ObjType"></param>
            <returns></returns>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.ToXml(System.Object,System.Type,System.IO.Stream)">
            <summary>
            Toes the XML.
            </summary>
            <param name="obj">The obj.</param>
            <param name="objType">Type of the obj.</param>
            <param name="stream">The stream.例如:Response.OutputStream等</param>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.ToXmlFile(System.Object,System.String)">
            <summary>
            将对象序列化到文件中
            </summary>
            <param name="Obj"></param>
            <param name="fileName">文件全名</param>
        </member>
        <member name="M:OilDigital.Common.XmlHelper.ToXmlFile(System.Object,System.Type,System.String)">
            <summary>
            将对象序列化到文件中
            </summary>
            <param name="Obj"></param>
            <param name="ObjType"></param>
            <param name="fileName">文件全名</param>
        </member>
    </members>
</doc>
